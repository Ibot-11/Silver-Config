## Macro by Ibot-11 ##
### IMPORTANT! ###
# Add following parts to your PRINT_START and PRINT_END or the filament sensor will be DISABLED while printing. Only add the lines if you have a filament sensor!
# PRINT_START:
#     SET_FILAMENT_SENSOR SENSOR={printer['gcode_macro FILAMENT_CHANGE'].sensor_name} ENABLE=1
# PRINT_END:
#     SET_FILAMENT_SENSOR SENSOR={printer['gcode_macro FILAMENT_CHANGE'].sensor_name} ENABLE=0

[gcode_macro FILAMENT_CHANGE] # Only works with official mainsail.cfg
description: (Un)Load filament
variable_sensor_name: "" #Config name of the filament sensor. leave empty if you don't have one.
variable_position_x: -1           # X position when loading/unloading filament. -1 will move the toolhead to the middle of the axis.
variable_position_y: 20           # position when loading/unloading filament. -1 will move the toolhead to the middle of the axis.
variable_position_z: 50           # Z position when loading/unloading filament if not paused.
variable_move_speed: 500          # XYZ move speed in mm/s
variable_load_speed: 15           # speed for filament moves without extrusion.
variable_purge_speed: 3           # purge speed in mm/s.
variable_hotend_temp: 250         # hotend temperature if not paused.
variable_distance_to_hotend: 65   # length between extruder and hotend.
variable_purge_length_load: 50    # purge amount in mm when loading.
variable_purge_length_unload: 5   # purge amount in mm before unloading.
gcode:
    {% set FUNCTION = params.FUNCTION|default("LOAD")|string %}    
    {% set resume = printer['gcode_macro RESUME'] %}
    {% set c_variable = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}

    {% if position_x == -1 %}
      {% set POSITION_X = printer.toolhead.axis_maximum.x//2 %}
    {% endif %}
    {% if position_y == -1 %}
      {% set POSITION_Y = printer.toolhead.axis_maximum.y//2 %}
    {% endif %}

  
    {% if not printer.pause_resume.is_paused %}
      {% if printer.toolhead.homed_axes != "xyz" %}
        G28
      {% endif %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={hotend_temp}
      RESPOND TYPE=echo MSG='Heating...'
      G90
      G0 X{POSITION_X|default(position_x)} Y{POSITION_Y|default(position_y)} Z{position_z} F{move_speed*60}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend_temp-3}
        
        
    {% elif printer.pause_resume.is_paused %}
        G90
        G0 X{POSITION_X|default(position_x)} Y{POSITION_Y|default(position_y)} F{move_speed*60}
      {% if printer.idle_timeout.state|upper == "IDLE" or resume.idle_state %} #restore temperature if needed
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
        # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise 
        RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, resume.last_extruder_temp.temp) }'
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={resume.last_extruder_temp.temp}
        RESPOND TYPE=echo MSG='Heating...'
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={resume.last_extruder_temp.temp-3}
      {% endif %}
      
    {% endif %}
    

    M83
    
    {% if FUNCTION == "LOAD" %}
      RESPOND TYPE=echo MSG='Loading Filament...'
      M117 Loading Filament...
      M106 S255
      {% for _ in range(distance_to_hotend) %} #doing a loop to prevent error
        G1 E1 F{load_speed*60}
      {% endfor %}
      {% for _ in range(purge_length_load) %}
        G1 E1 F{purge_speed*60}
      {% endfor %}
      G1 E-{c_variable.retract|default(1)} F{load_speed*60}
      G4 S2000 #wait 2 sec
      M107

      
    {% elif FUNCTION == "UNLOAD" %}
      RESPOND TYPE=echo MSG='Unloading Filament...'
      M117 Unloading Filament...
      {% for _ in range(purge_length_unload) %}
        G1 E1 F{purge_speed*60}
      {% endfor %}
      {% for _ in range(distance_to_hotend) %}
        G1 E-1.5 F{load_speed*60}
      {% endfor %}
      
    {% else %}
      RESPOND TYPE=echo MSG='Unknown Function!'
    {% endif %}
    
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0  
    M117
    RESPOND TYPE=echo MSG='Done!'


[delayed_gcode filament_sensor]
initial_duration: 1
gcode:
    {% set filament = printer['gcode_macro FILAMENT_CHANGE'] %}
    
    {% if filament.sensor_name != "" %}
      SET_FILAMENT_SENSOR SENSOR={filament.sensor_name} ENABLE=0
    {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
    FILAMENT_CHANGE FUNCTION='LOAD'
    
[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    FILAMENT_CHANGE FUNCTION='UNLOAD'