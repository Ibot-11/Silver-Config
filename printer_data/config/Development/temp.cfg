## Macros by Ibot-11 ##

## Orcaslicer Start G-code
## PRINT_START_VARIABLES EXTRUDER_TEMP=[nozzle_temperature_initial_layer] BED_TEMP=[bed_temperature_initial_layer_single] CHAMBER_TEMP=[chamber_temperature] MATERIAL="[filament_type]" BED_TYPE="[curr_bed_type]"
## PRINT_START_1
## PRINT_START_2

[gcode_macro PRINT_START_VARIABLES]
description: Set variables for print
### Plate Settings ###
variable_offset_cool_plate: 0 # PET, PEY etc.
variable_offset_engineering_plate: 0 # Garolite for PA, PET etc.
variable_offset_high_temp_plate: 0 # Smooth PEI
variable_offset_textured_pei_plate: 0.075 # Textured PEI
variable_probe_temp_offset: -100 # -100°C of the printing temperature. This method ensures that there is always the same amount of thermal expansion of the hotend when printing different materials.

### Variables (used in PRINT_START_1 and PRINT_START_2) ###
variable_extruder_temp: 200
variable_bed_temp: 60
variable_chamber_temp : 0 # This is used for WAITING before starting a print, and NOT for ACTIVE CONTROL of the temperature
variable_material: ""
variable_bed_type: ""
variable_bed_type_offset: 10
variable_bed_fan: false
bariable_exhaust_fan: false
gcode:
    ### Get Parameters ###
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
	{% set BED_TEMP = params.BED_TEMP|float %}
	{% set CHAMBER_TEMP = params.CHAMBER_TEMP|float|default(0) %}
    {% set MATERIAL = params.MATERIAL|string %}
    {% set BED_TYPE = params.BED_TYPE|string %}
    
    ### FAN MANAGEMENT ###
	{% if CHAMBER_TEMP > 0 and CHAMBER_TEMP <= 25 %}
      ### semi heated chamber (PETG) ###
      {% set BED_FAN = False %} # Bedfan 0%
      {% set EXHAUST_FAN = False %} # Exhaust 0%
    {% elif CHAMBER_TEMP > 0 %}
      ### heated chamber ###
      {% set BED_FAN = True %} # Bedfan 100%
      {% set EXHAUST_FAN = False %} # Exhaust 0%
	{% elif CHAMBER_TEMP == 0 %}
      ### cold chamber ###
      {% set BED_FAN = False %} # Bedfan 0%
      {% set EXHAUST_FAN = True %} # Exhaust 100%
	{% endif %}

    ### PLATE MANAGEMENT ###
    {% if bed_type == "Cool Plate" %}
      {% set BED_TYPE_OFFSET = offset_cool_plate %}
    {% elif bed_type == "Engineering Plate" %}
      {% set BED_TYPE_OFFSET = offset_engineering_plate %}
    {% elif bed_type == "High Temp Plate" %}
      {% set BED_TYPE_OFFSET = offset_high_temp_plate %}
    {% elif bed_type == "Textured PEI Plate" %}
      {% set BED_TYPE_OFFSET = offset_textured_pei_plate %}
    {% else %}
      RESPOND TYPE=error MSG='Unknown Print Plate'
    {% endif %}

    ### Set Variables ###  
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=bed_temp VALUE={BED_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=chamber_temp VALUE={CHAMBER_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=material VALUE='"{MATERIAL}"' # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=bed_type VALUE='"{BED_TYPE}"' # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=bed_type_offset VALUE={BED_TYPE_OFFSET} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=bed_fan VALUE={BED_FAN} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=exhaust_fan VALUE={EXHAUST_FAN} # set variable

	
[gcode_macro PRINT_START_1]
description: Perform heatup and get ready to print (1/2)
gcode:
    {% set print_start = printer['gcode_macro PRINT_START_VARIABLES'] %} # use print_start instead of printer['gcode_macro PRINT_START_VARIABLES']. Example printer['gcode_macro PRINT_START_VARIABLES.extruder_temp'] -> print_start.extruder_temp
    {% set th = printer.toolhead %}

    ### PRINT START Part 1 ###

    M117 # Clear status messages
    CLEAR_PAUSE # clear any pause...
    BED_MESH_CLEAR # clear bed mesh

	G28 # home
    M107 # turn off part fan

	G90 # absolute move
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z3 F30000 # move to heating pos

    ### Set Exhaust Fan ###
	{% if print_start.exhaust_fan == True %}
      SET_FAN_SPEED FAN=exhaust_fan SPEED=1 # Exhaust 100%
    {% elif print_start.exhaust_fan == False %}
      SET_FAN_SPEED FAN=exhaust_fan SPEED=0 # Exhaust 0%
    {% endif %}
    ### Set Bedfan ###
    {% if print_start.bed_fan == True %}
      SET_FAN_SPEED FAN=bed_fan SPEED=0.5 # Bedfan 50%
    {% elif print_start.bed_fan == False %}
      SET_FAN_SPEED FAN=bed_fan SPEED=0 # Bedfan 0%
    {% endif %}

    M117 Heating to target...
    RESPOND TYPE=echo MSG='Heating to target Temperature...'
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={print_start.extruder_temp + print_start.probe_temp_offset} # probe temp
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={print_start.bed_temp} 
    M109 S{print_start.extruder_temp + print_start.probe_temp_offset} # wait for extruder temperature
    M190 S{print_start.bed_temp}  # wait for bed temperature

    ### Set Bedfan to 100% ###
    {% if print_start.bed_fan == True %}
    SET_FAN_SPEED FAN=bed_fan SPEED=1 # Bedfan 100% after heatup
    {% endif %}

    M117 Starting Heatsoak...
    RESPOND TYPE=echo MSG='Starting Heatsoak...' # Needed for good first layer. I recommend doing a short heatsoak even when you print PLA
    HEAT_SOAK HEATER="heater_bed" TARGET={print_start.bed_temp} SOAKER="temperature_sensor chamber" SOAK_TEMP={print_start.chamber_temp} TIMEOUT=30 # min 40°C chamber, 30 min timeout
    # It is not allowed to place anything after the heatsoak macro!

[gcode_macro PRINT_START_2] # If this is not split into 2 macros it will just skip the heatsoak macro. Weird klipper behaviour...
description: Perform calibration and get ready to print (2/2)
gcode:
    ### PRINT START Part 2 ###
    
    M117 Calibrating for Print...
    RESPOND TYPE=echo MSG='Calibrating for Print...'
    RESPOND TYPE=echo MSG='Beacon Model Calibrate -> Quad Gantry Level -> Bed Mesh -> Z-Offset Calibration -> Purge Line -> Start Printing'

    G90
    G0 Z10 F30000 # 10mm lift

    CLEAN_NOZZLE
        
    G28 Z METHOD=CONTACT CALIBRATE=1 # calibrate offset and model
    QUAD_GANTRY_LEVEL
    G28 Z # always home Z after quad gantry level

    BED_MESH_CALIBRATE ADAPTIVE=1 # adaptive bed mesh calibrate

    G91
    G0 Z10 F30000 # lift 10mm

    CLEAN_NOZZLE
    G28 Z METHOD=CONTACT CALIBRATE=0 # calibrate only offset
    
    SET_GCODE_OFFSET Z_ADJUST=+{BED_TYPE_OFFSET} # add plate offset defined in Variables

    G90
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000
	M109 S{print_start.extruder_temp}
    
    CLEAN_NOZZLE # clean nozzle before starting the print
    G90
    G0 Z30 F30000 # lift nozzle to 30mm absolute

    RESPOND TYPE=echo MSG='Start Printing...'
    M117 # Clear status messages
    
    {% if print_start.material != "TPU" %} # Only purge if material is not TPU -> No purge for TPU since this causes trouble @ 24mm³/s...
      PURGE_LINE # Purge Line
    {% endif %}


[gcode_macro PRINT_END]
description: The end of every print. Turn off heaters etc.
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F3600                 ; retract filament; 20 mm enables cold filamet changes
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 5} F3600  ; park nozzle at rear
    SAFE_LIFT_Z Z=50 F=3000.0 # lift 50 mm if possible
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0
    SET_FAN_SPEED FAN=bed_fan SPEED=0.0
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    
    BED_MESH_CLEAR
    M117 # Clear status messages
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M18 ; turn off motors

    ### DISABLE FILAMENT SENSOR ###
    SET_FILAMENT_SENSOR SENSOR={printer['gcode_macro FILAMENT_CHANGE'].sensor_name} ENABLE=0
      

[gcode_macro SAFE_LIFT_Z]
description: Lifts Z only if it's save
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z

[gcode_macro SMARTHOME]
description: Only homes if necessary 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

[gcode_macro IDLE_POS]
description: Move the printhead to a idle position
gcode:
    {% set th = printer.toolhead %}
    SAVE_GCODE_STATE NAME=IDLE_POS
    SMARTHOME
    M106 S0
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z{th.axis_maximum.z-50} F30000
    RESTORE_GCODE_STATE NAME=IDLE_POS