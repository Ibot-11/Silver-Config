#  ___   _          _              
# | _ \ | |  __ _  | |_   ___   ___
# |  _/ | | / _` | |  _| / -_) (_-<
# |_|   |_| \__,_|  \__| \___| /__/
#                                  
[gcode_macro TEXTURED_PLATE]
description: Offset correction for textured plates
variable_offset_correction : 0.02 #0.06 # set your value here
variable_plate_name: "TEXTURED_PLATE" # set your macro name here! Must be the same!
gcode:
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=plate_name VALUE="'{plate_name}'"
    { action_respond_info('Correction value for %s loaded. Correction: +%.3f' % (plate_name, offset_correction)) }

[gcode_macro SMOOTH_PLATE]
description: Offset correction for smooth plates
variable_offset_correction : 0.06 #0.1 # set your value here
variable_plate_name: "SMOOTH_PLATE" # set your macro name here! Must be the same!
gcode:
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=plate_name VALUE="'{plate_name}'"
    { action_respond_info('Correction value for %s loaded. Correction: +%.3f' % (plate_name, offset_correction)) }

#    _            _              ___     __    __              _   
#   /_\    _  _  | |_   ___     / _ \   / _|  / _|  ___  ___  | |_ 
#  / _ \  | || | |  _| / _ \   | (_) | |  _| |  _| (_-< / -_) |  _|
# /_/ \_\  \_,_|  \__| \___/    \___/  |_|   |_|   /__/ \___|  \__|
#                                                                                                                                    
[gcode_macro AUTO_OFFSET_VARIABLES]
description: Just saves variables and resets them
### AUTO OFFSET CALIBRATION SETTINGS ###
variable_default_tap_samples: 3
variable_default_nozzle_samples: 3
variable_max_adjustment : 0.5 # Define max adjustment | 0.5 is default
variable_max_deviation: 0.005 # max allowed devition between samples. Errors if greater. Used for tap and nozzle probe.
variable_probe_temp: 150 # default probe temperature
variable_plate_name: "TEXTURED_PLATE" # Default plate name (macro name)
variable_nozzle_cleaning_macro: "CLEAN_NOZZLE" # Set your macro for nozzle cleaning
variable_nozzle_probe_steps_first: -0.1
variable_nozzle_probe_speed_first: 0.25
variable_nozzle_probe_steps_second: -0.0001
variable_nozzle_probe_speed_second: 0.025

### DO NOT EDIT BELOW ###
variable_tap_samples: 3
variable_nozzle_samples: 3
variable_tap_result: 0 # Do not edit
variable_nozzle_results: "" # Do not edit
variable_auto_offset_state : False # Used for a safety feature. Do not edit!
variable_extruder_temp: 0 # must be set by params
variable_nozzle_probe_state: False # False = untriggered, True = triggered
variable_nozzle_probe_phase: 0
gcode:
    ### Reset all variables that changes while the macro runs ###
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=tap_result VALUE=0
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=nozzle_results VALUE="''"
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=auto_offset_state VALUE=False
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=extruder_temp VALUE=0
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=nozzle_probe_state VALUE=False
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=nozzle_probe_phase VALUE=0

#  __  __                              
# |  \/  |  __ _   __   _ _   ___   ___
# | |\/| | / _` | / _| | '_| / _ \ (_-<
# |_|  |_| \__,_| \__| |_|   \___/ /__/
#
[gcode_macro AUTO_OFFSET]
description: Calibrate your first layer
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set plate = printer['gcode_macro ' + auto_offset.plate_name] %} # plate.offset_correction for example will give you the correction value of the active plate (auto_offset.plate_name)
    {% set th = printer.toolhead %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %} # required for thermal compensation. -1 is a dummy value to trigger a error. If undefined statement does not work
    {% set TAP_SAMPLES = params.TAP_SAMPLES|default(auto_offset.default_samples_tap)|int %} # params sample amount. Use defined default if not set
    {% set NOZZLE_SAMPLES = params.NOZZLE_SAMPLES|default(auto_offset.default_samples_nozzle)|int %} # params sample amount. Use defined default if not set

    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %} # current probe offset
    {% set PROBE_RETRACT = printer.configfile.settings.probe.sample_retract_dist %} # probe retract distance
    {% set PROBE_LIFT_SPEED = printer.configfile.settings.probe.lift_speed %} # probe lift speed

    {% if EXTRUDER_TEMP is undefined %}
      { action_raise_error('In order to run this macro you have to specify EXTRUDER_TEMP.') } # errors if runned without extruder temperature
    {% endif %}

    AUTO_OFFSET_VARIABLES # reset variables

    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=auto_offset_state VALUE=True # set state to true. This is a feature that prevents running other AUTO_OFFSET macros directly. Like AUTO_OFFSET_ADJUSTMENT
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=tap_samples VALUE={TAP_SAMPLES}
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=nozzle_samples VALUE={NOZZLE_SAMPLES}

    { action_respond_info('Selected Plate: %s. Correction value: +%.3f' % (auto_offset.plate_name, plate.offset_correction)) } # show selected plate

    {% if printer.toolhead.homed_axes != "xyz" %} #Smarthome. Homes if not homed
        G28
    {% endif %}

    {% if printer.extruder.temperature < auto_offset.probe_temp - 3 or printer.extruder.target < auto_offset.probe_temp or printer.extruder.temperature > auto_offset.probe_temp + 3 or printer.extruder.target > auto_offset.probe_temp %} # heat nozzle if not at probing temp already or target is below probe temp
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center
    M109 S{auto_offset.probe_temp} # heat up to probe temp
    G4 P10000 # wait 10 sec to stabilize
    {% endif %}

    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro
    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} Z25 F30000 # move to endstop position
    SET_GCODE_OFFSET Z=0 # remove any correction before calibration
    PROBE SAMPLES=5 SAMPLES_TOLERANCE_RETRIES=3 # some probes to squish away any material before doing measurements
    G91
    G0 Z{PROBE_RETRACT - PROBE_OFFSET} F{PROBE_LIFT_SPEED*60}

    AUTO_OFFSET_TAP
    G91
    G0 Z{30 - PROBE_OFFSET}

    {% set TAP_RESULT = printer.probe.last_z_result %}
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=tap_result VALUE={TAP_RESULT}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} F30000 # park at rear center
    M109 S{auto_offset.extruder_temp}
    G4 P10000 # wait 10 sec to stabilize

    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} F30000 # move to endstop position

    G91
    G0 Z{-30 + auto_offset.max_adjustment*2}

    {% for _ in range(NOZZLE_SAMPLES) %} # Loop for samples
    AUTO_OFFSET_NOZZLE
    {% endfor %}


    G91
    G0 Z25 # raise 25mm

    AUTO_OFFSET_VARIABLES # reset variables

[gcode_macro AUTO_OFFSET_TAP]
description: Probe module of AUTO_OFFSET
gcode:
      {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
      PROBE SAMPLES={auto_offset.tap_samples} SAMPLES_TOLERANCE_RETRIES=5

[gcode_macro AUTO_OFFSET_NOZZLE]
description: Probe module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set SAMPLE_RESULTS = auto_offset.sample_results %} # get values from variable and set them as SAMPLE_RESULTS

    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} F30000 # move to endstop position

    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=nozzle_probe_state VALUE=False
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=nozzle_probe_phase VALUE=0

    {% set LOOP_BREAK = 0|int %}
    {% for _ in range(LOOP_BREAK, 1) %}
      M400
      {% if auto_offset.nozzle_probe_state == True %}
        {% set LOOP_BREAK = 1|int %}
      {% elif auto_offset.nozzle_probe_state == False %}
      AUTO_OFFSET_NOZZLE_PROBE
      {% endif %}
    { action_respond_info('%.1f %.1f %s %s' % (LOOP_BREAK, auto_offset.nozzle_probe_phase, printer['gcode_button nozzle_probe'].state, auto_offset.nozzle_probe_state)) }
    {% endfor %}

    G91
    G0 Z{auto_offset.nozzle_probe_steps_first * 1.25}

    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=nozzle_probe_state VALUE=False
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=nozzle_probe_phase VALUE=1

    {% set LOOP_BREAK = 0|int %}
    {% for _ in range(LOOP_BREAK, 1) %}
      {% if auto_offset.nozzle_probe_state == True %}
        {% set LOOP_BREAK = 1|int %}
      {% elif auto_offset.nozzle_probe_state == False %}
      AUTO_OFFSET_NOZZLE_PROBE
      {% endif %}
    {% endfor %}

    {% set SAMPLE_RESULTS = SAMPLE_RESULTS ~ printer.motion_report.live_position.z | round(4) ~ "," %} # add last sample result. Round result

    G91
    G0 Z{auto_offset.nozzle_probe_steps_first * 2}

[gcode_macro AUTO_OFFSET_NOZZLE_PROBE]
description: Probe module of AUTO_OFFSET
gcode:
      {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples

      {% if printer.probe.last_query == True %}
        { action_raise_error('Tap triggered prior to nozzle probe') } # errors if tap is triggered

      {% elif printer['gcode_button nozzle_probe'].state == "RELEASED" %}
        G90

        {% if auto_offset.nozzle_probe_phase == 0 %}
          G0 Z{auto_offset.nozzle_probe_steps_first} F{auto_offset.nozzle_probe_speed_first}

        {% elif auto_offset.nozzle_probe_phase == 1 %}
          G0 Z{auto_offset.nozzle_probe_steps_second} F{auto_offset.nozzle_probe_speed_second}

        {% endif %}

      {% elif printer['gcode_button nozzle_probe'].state == "PRESSED" %}
        SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=nozzle_probe_state VALUE=True
      {% endif %}

[gcode_macro Test]
description: Probe module of AUTO_OFFSET
gcode:
    {% set LOOP_BREAK = 100000|int %}
    {% for BREAKER in range(LOOP_BREAK) %}
      Test2
      M400
      {% if printer.probe.last_query == 1 %}
        {% set LOOP_BREAK = BREAKER|int %}
      {% endif %}

    {% endfor %}

[gcode_macro Test2]
description: Probe module of AUTO_OFFSET
gcode:
    G91
    G0 Z0.01
    QUERY_PROBE

