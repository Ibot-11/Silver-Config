#  ___   _          _              
# | _ \ | |  __ _  | |_   ___   ___
# |  _/ | | / _` | |  _| / -_) (_-<
# |_|   |_| \__,_|  \__| \___| /__/
#                                  
[gcode_macro TEXTURED_PLATE]
description: Offset correction for textured plates
variable_offset_correction : 0.06 # set your value here
variable_plate_name: "TEXTURED_PLATE" # set your macro name here! Must be the same!
gcode:
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=plate_name VALUE="'{plate_name}'"
    { action_respond_info('Correction value for %s loaded. Correction: +%.3f' % (plate_name, offset_correction)) }

[gcode_macro SMOOTH_PLATE]
description: Offset correction for smooth plates
variable_offset_correction : 0.1 # set your value here
variable_plate_name: "SMOOTH_PLATE" # set your macro name here! Must be the same!
gcode:
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=plate_name VALUE="'{plate_name}'"
    { action_respond_info('Correction value for %s loaded. Correction: +%.3f' % (plate_name, offset_correction)) }

#  ___         _     _     _                    
# / __|  ___  | |_  | |_  (_)  _ _    __ _   ___
# \__ \ / -_) |  _| |  _| | | | ' \  / _` | (_-<
# |___/ \___|  \__|  \__| |_| |_||_| \__, | /__/
#                                    |___/      
[gcode_macro AUTO_OFFSET_VARIABLES]
description: Just saves variables and resets them
### SETTINGS ###
variable_default_samples: 3
variable_max_adjustment : 0.5 # Define max adjustment | 0.5 is default
variable_max_deviation: 0.01 # max allowed devition between samples. Errors if greater
variable_probe_temp: 150 # default probe temperature
variable_plate_name: "TEXTURED_PLATE" # Default plate name (macro name)
variable_nozzle_cleaning_macro: "CLEAN_NOZZLE" # Set your macro for nozzle cleaning

### DO NOT EDIT BELOW ###
variable_samples: 0 # Edit variable_default_samples!
variable_sample_results: "" # Do not edit
variable_auto_offset_state : False # Used for a safety feature. Do not edit!
gcode:
    ### Reset all variables that changes while the macro runs ###
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=samples VALUE=0 
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=sample_results VALUE="''" 
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=auto_offset_state VALUE=False

##########################################################################################################################

#  __  __                              
# |  \/  |  __ _   __   _ _   ___   ___
# | |\/| | / _` | / _| | '_| / _ \ (_-<
# |_|  |_| \__,_| \__| |_|   \___/ /__/
#
[gcode_macro AUTO_OFFSET]
description: Calibrate your first layer
gcode:
    {% set variable = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use variable instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> variable.samples
    {% set plate = printer['gcode_macro ' + variable.plate_name] %} # plate.offset_correction for example will give you the correction value of the active plate (variable.plate_name)
    {% set th = printer.toolhead %}

    {% set PROBE_TEMP = params.PROBE_TEMP|default(variable.probe_temp)|float %} # params probe temp. Use defined default if not set
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %} # current probe offset
    {% set SAMPLES = params.SAMPLES|default(variable.default_samples)|int %} # params sample amount. Use defined default if not set

    AUTO_OFFSET_VARIABLES # reset variables

    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=auto_offset_state VALUE=True # set state to true. This is a feature that prevents running other AUTO_OFFSET macros directly. Like AUTO_OFFSET_ADJUSTMENT
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=samples VALUE={SAMPLES}

    { action_respond_info('Selected Plate: %s. Correction value: +%.3f' % (variable.plate_name, plate.offset_correction)) } # show selected plate

    {% if printer.toolhead.homed_axes != "xyz" %} #Smarthome. Homes if not homed
        G28
    {% endif %}

    {% if printer.extruder.temperature < PROBE_TEMP - 3 or printer.extruder.target < PROBE_TEMP %} # heat nozzle if not at probing temp already or target is below probe temp
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # move to the rear center
    M109 S{PROBE_TEMP} # heat up to probe temp
    G4 P10000 # wait 10 sec to stabilize
    {% endif %}

    {variable.nozzle_cleaning_macro} # Use nozzle cleaning macro
    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} Z20 F30000 # move to endstop position
    SET_GCODE_OFFSET Z=0 # remove any correction before calibration
    PROBE SAMPLES=5 SAMPLES_TOLERANCE_RETRIES=3 # do some probe to squish away any material before do measurements
    G91
    G0 Z{(PROBE_OFFSET*(-1)) + variable.max_adjustment * 1.25} # move up by z-offset + max_adjustment value * 1.25
    
    {% for _ in range(SAMPLES) %} # Loop for samples
      AUTO_OFFSET_SAMPLE # do samples
    {% endfor %}

    G91
    G0 Z25 # raise 25mm

    AUTO_OFFSET_ADJUSTMENT # apply adjustment

    G28 Z # home Z

    AUTO_OFFSET_VARIABLES # reset variables

[gcode_macro AUTO_OFFSET_SAMPLE]
description: Sample module of AUTO_OFFSET
gcode:
    {% set variable = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use variable instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> variable.samples

    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}

    {% if variable.auto_offset_state %} # prevents direct use. This is only a calculation module that can be called via AUTO_OFFSET

      G28 E # home with endstop
      PROBE SAMPLES=3 SAMPLES_TOLERANCE_RETRIES=5 # probe on endstop
      G0 Z{(PROBE_OFFSET*(-1)) + variable.max_adjustment} # move up by z-offset + max_adjustment value

      AUTO_OFFSET_CALCULATION # do calculation

    {% else %}
      { action_raise_error('You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.') } # errors if macro is called directly
    {% endif %}

[gcode_macro AUTO_OFFSET_CALCULATION]
description: Calculate module of AUTO_OFFSET
gcode:
    {% set variable = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use variable instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> variable.samples
    {% set PROBE_RESULT = printer.probe.last_z_result %}
    {% set Z_ENDSTOP_OFFSET = printer.configfile.settings.stepper_z.position_endstop %}
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set SAMPLE_RESULTS = variable.sample_results %} # get values from variable and set them as SAMPLE_RESULTS

    {% if variable.auto_offset_state %} # prevents direct use. This is only a calculation module that can be called via AUTO_OFFSET

        ### CALCULATION! ###
        {% set SAMPLE_RESULT = ((PROBE_RESULT - (Z_ENDSTOP_OFFSET + PROBE_OFFSET))*(-1)) %} # calculate gcode offset adjustment

        { action_respond_info('Sample result: %.4f' % (SAMPLE_RESULT)) } # show sample result

      {% set SAMPLE_RESULTS = SAMPLE_RESULTS ~ SAMPLE_RESULT | round(4) ~ "," %} # add last sample result. Round result
      SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=sample_results VALUE="'{SAMPLE_RESULTS}'" # add all last samples + new sample. Will be divided by AUTO_OFFSET_ADJUSTMENT. Saved as string. Not the most elegant solution, but works great

    {% else %}
      { action_raise_error('You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.') } # errors if macro is called directly
    {% endif %}

[gcode_macro AUTO_OFFSET_ADJUSTMENT]
description: Adjustment module of AUTO_OFFSET
gcode:
    {% set variable = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use variable instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> variable.samples
    {% set plate = printer['gcode_macro ' + variable.plate_name] %} # plate.offset_correction for example will give you the correction value of the active plate (variable.plate_name)

    {% if variable.auto_offset_state %} # prevents direct use. This is only a calculation module that can be called via AUTO_OFFSET

      ### Show all samples ###
      {% set SAMPLE_RESULTS = variable.sample_results[:-1] %} # remove last ,
        { action_respond_info('Samples:\n%s' % (SAMPLE_RESULTS.replace(",", "\n"))) } # show all samples

      ### Calculate delta & show max deviation ###
      {% set SAMPLE_RESULTS_LIST = SAMPLE_RESULTS.split(",") | map('float') | list %} # convert to list
      {% if SAMPLE_RESULTS_LIST | length > 1 %} # only calculate deviation when more than 2 samples
        {% set DELTA_SAMPLE_RESULTS = SAMPLE_RESULTS_LIST | max - SAMPLE_RESULTS_LIST | min %} # calculate deviation
          { action_respond_info('Deviation: %.4f' % (DELTA_SAMPLE_RESULTS)) } # show deviation
      {% endif %}

      ### Calculate average result & show it ###
      {% set AVERAGE_SAMPLE_RESULT = SAMPLE_RESULTS.split(",") | map('float') | sum / SAMPLE_RESULTS.split(",") | length %}
        { action_respond_info('Average result: %.4f' % (AVERAGE_SAMPLE_RESULT)) } # show average result

      { action_respond_info('Selected Plate: %s. Correction value: +%.3f' % (variable.plate_name, plate.offset_correction)) } # show selected plate again

      ### Calculate actual adjustment based on the average value & show it ###
      {% set ADJUSTMENT = AVERAGE_SAMPLE_RESULT + plate.offset_correction %} # Calculated adjustment + plate specific correction value. You need some extra distance between nozzle and plate. Value depents on the plate surface type
        { action_respond_info('Adjustment: %.4f' % (ADJUSTMENT)) } # show adjustment result

      ### Protection features ###
      {% if plate.offset_correction < 0 %} # prevent offset corrections below 0
       { action_raise_error('NEGATIVE offset corrections are NOT ALLOWED! A negative value would scrape your bed! Current value: %.1fC' % (plate.offset_correction)) }
      {% endif %}

      {% if ADJUSTMENT > variable.max_adjustment or ADJUSTMENT < -variable.max_adjustment %} # prevents adjustments greater than the max adjustment value
         { action_raise_error('Adjustment is greater than the max adjustment value allows.') }
      {% endif %}

      {% if DELTA_SAMPLE_RESULTS > variable.max_deviation %} # errors if deviation is greater than max allowed deviation
         { action_raise_error('Meassured deviation (%.4f) is greater than allowed deviation (%.4f)' % (DELTA, variable.max_deviation)) }
      {% endif %}

      ### Apply value with SET_GCODE_OFFSET ###
      SET_GCODE_OFFSET Z={ADJUSTMENT}

    {% else %}
      { action_raise_error('You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.') } # errors if macro is called directly
    {% endif %}

[gcode_macro HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G0 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G0 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro HOME_PROBE]
gcode:
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set PROBE_RETRACT = printer.configfile.settings.probe.sample_retract_dist %}
    {% set PROBE_LIFT_SPEED = printer.configfile.settings.probe.lift_speed %}
    {% set PROBE_SPEED = printer.configfile.settings.probe.speed %}
    {% set th = printer.toolhead %}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} F30000 # move to bed center
    SET_KINEMATIC_POSITION Z={th.axis_maximum.z} # set Z to max height in order to get max possible travel distance without error
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED*1.5} # Use probe speed * 1.5
    G91
    G0 Z{PROBE_RETRACT - PROBE_OFFSET} F{PROBE_LIFT_SPEED*60} # lift probe for second pass
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED/2} # second pass is probe speed / 2
    SET_KINEMATIC_POSITION Z={PROBE_OFFSET} # Force set position at probe trigger point. Use probe offset to get Z0 position 
    G91
    G0 Z10 # lift up 10mm

[gcode_macro HOME_ENDSTOP]
gcode:
    {% set HOME_TEMP = 150 %} # Home temp. A minimum temperature ist required to squish away any material ooze
    {% set ACTUAL_TEMP = printer.extruder.temperature %} # current extruder temp
    {% set TARGET_TEMP = printer.extruder.target %} # extruder target temp
    {% set MIN_TEMP = HOME_TEMP - 5 %} # minimum allowed homing temp. Home temp - 5°C

     {% if TARGET_TEMP < HOME_TEMP %} # increase temp if target too low
         { action_respond_info('Extruder temperature target of %.1fC is too low, increasing to %.1fC' % (TARGET_TEMP, HOME_TEMP)) }
        M109 S{HOME_TEMP}

     {% else %}
        {% if ACTUAL_TEMP < MIN_TEMP %} #increase temp if actual temp too low
            { action_respond_info('Extruder temperature %.1fC is still too low, waiting until above %.1fC' % (ACTUAL_TEMP, MIN_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={MIN_TEMP}
        {% endif %}
     {% endif %}
    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} F30000 # move to endstop position
    G28 Z # home Z
    G91
    G0 Z1 # move up 1mm. I recommend don't changing this value


#####################################################################
# 	Misc
#####################################################################
[force_move] # force_move is required for HOME_PROBE
enable_force_move: True