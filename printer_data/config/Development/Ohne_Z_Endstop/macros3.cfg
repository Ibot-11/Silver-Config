#  __  __                                     
# |  \/  |   __ _    ___   _ __    ___    ___ 
# | |\/| |  / _` |  / __| | '__|  / _ \  / __|
# | |  | | | (_| | | (__  | |    | (_) | \__ \
# |_|  |_|  \__,_|  \___| |_|     \___/  |___/
#                                             
[gcode_macro PRINT_START]
description: Perform calibration and get ready to print
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set PROBE_TEMP = 180 %}
    {% set th = printer.toolhead %}

    CLEAR_PAUSE
    BED_MESH_CLEAR
    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 FUZZ_ENABLE=1

    M107
    M117 Homing..
    G28
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP} 
    M109 S{EXTRUDER_TEMP}               ; wait for extruder temperature
    M190 S{BED_TEMP}                    ; wait for bed temprature

    M117 Calibrating first layer..
    AUTO_OFFSET EXTRUDER_TEMP={EXTRUDER_TEMP} PROBE_TEMP={PROBE_TEMP}

    M117 Heating..
    M109 S{PROBE_TEMP}               ; wait for extruder temperature

    M117 Cleaning..
    CLEAN_NOZZLE

    M117 Gantry adjust..
    QUAD_GANTRY_LEVEL
    G28 Z

    M117 Bed Mesh calibrate..
    BED_MESH_CALIBRATE

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000

    M109 S{EXTRUDER_TEMP}

    M117 Cleaning..
    CLEAN_NOZZLE

    PURGE_LINE

    M117

[gcode_macro PURGE_LINE]
description: Prime the nozzle
gcode:
    SAVE_GCODE_STATE NAME=PURGE_LINE
    {% set purge_start_x = params.PRINT_START_X|default(5.0)|float %}
    {% set purge_start_y = params.PRINT_START_Y|default(3.0)|float %}

    # purge/prime nozzle
    G90 # use absolute coordinates
    # go to the start of the print area
    G1 X{purge_start_x} Y{purge_start_y} Z0.3 F9000 # go to the purge start location
    G91 # relative coordinates
    M83 # extruder relative mode
    G92 E0.0
    G1 X200.0 E200.0 F1000.0  # thick start line
    G1 X25.0 E2.5 F1800.0  # thin outro line
    G1 X5.0 E0 F1800.0  # move without extruding
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z0.5 F1800 # Z hop
    G1 F30000

[gcode_macro PRINT_WARMUP]
description: Perform initial heating tasks
variable_soak_temp : 0
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set SOAK_TEMP = params.SOAK_TEMP|default(0)|float %}
    {% set th = printer.toolhead %}

    CLEAR_PAUSE

    G28
    M104 S{EXTRUDER_TEMP * 0.5}
    M140 S{BED_TEMP}
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z3 F30000
    M107
    {% if SOAK_TEMP > 0 %}
    HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor chamber' SOAK_TEMP={SOAK_TEMP} CANCEL='CANCEL_PRINT' TIMEOUT=60
    {% endif %}

[gcode_macro PRINT_END]
description: The end of every print. Turn off heaters etc.
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 3} F3600  ; park nozzle at rear
    SAFE_LIFT_Z Z=50 F=3000.0
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0
    SET_FAN_SPEED FAN=nevermore_fan SPEED=0.0
    SET_VELOCITY_LIMIT ACCEL=10000
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M18 ; turn off motors

[gcode_macro AUTO_OFFSET]
description: Calibrate your first layer
variable_offset_correction : 0 # adjust the default value below!
variable_max_adjustment : 0 # adjust the default value below!
variable_auto_offset_state : False
gcode:
    {% set OFFSET_CORRECTION = params.OFFSET_CORRECTION|default(0.025)|float %} # finetune squish | 0.02 is default
    {% set MAX_ADJUSTMENT = 0.5 %} # define max adjustment | 0.5 is default

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set PROBE_TEMP = params.PROBE_TEMP|default(180)|float %}
    {% set PROBE_OFFSET_X = printer.configfile.settings.probe.x_offset %}
    {% set PROBE_OFFSET_Y = printer.configfile.settings.probe.y_offset %}
    {% set th = printer.toolhead %}
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET VARIABLE=offset_correction VALUE={OFFSET_CORRECTION}
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET VARIABLE=max_adjustment VALUE={MAX_ADJUSTMENT}

    {% if printer.toolhead.homed_axes != "xyz" %} #Smarthome
        G28
    {% endif %}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000
    M109 S{EXTRUDER_TEMP}
    G4 P15000 # 15 sec
    CLEAN_NOZZLE
    SET_GCODE_OFFSET Z=0
    G28 E
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
    M106 S255
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={PROBE_TEMP + 5}
    M106 S0
    M109 S{PROBE_TEMP}
    G4 P15000 # 15 sec
    CLEAN_NOZZLE
    G90
    G0 X{printer["gcode_macro HOME_ENDSTOP"].endstop_x - PROBE_OFFSET_X} Y{printer["gcode_macro HOME_ENDSTOP"].endstop_y - PROBE_OFFSET_Y} F30000
    PROBE SAMPLES=3 SAMPLES_TOLERANCE_RETRIES=5
    G91
    G0 Z25
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET VARIABLE=auto_offset_state VALUE=True
    AUTO_OFFSET_CALCULATION
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET VARIABLE=auto_offset_state VALUE=False
    G28 Z


[gcode_macro AUTO_OFFSET_CALCULATION]
description: Calculate module of AUTO_OFFSET
gcode:
    {% if printer["gcode_macro AUTO_OFFSET"].auto_offset_state %}

      {% set PROBE_RESULT = printer.probe.last_z_result %}
      {% set Z_ENDSTOP_OFFSET = printer.configfile.settings.stepper_z.position_endstop %}
      {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
  
      {% set OFFSET_ADJUSTMENT = ((PROBE_RESULT - (Z_ENDSTOP_OFFSET + PROBE_OFFSET))*(-1)) + printer["gcode_macro AUTO_OFFSET"].offset_correction %} # calculate gcode offset adjustment

      {% if printer["gcode_macro AUTO_OFFSET"].offset_correction < 0 %} # prevent offset corrections below 0
         { action_raise_error('NEGATIVE offset corrections are NOT ALLOWED! A negative value would scrape your bed! Current value: %.1fC' % (printer["gcode_macro AUTO_OFFSET"].offset_correction)) }
      {% endif %}

      {% if OFFSET_ADJUSTMENT < 0 %} # check for negative values
      {% set OFFSET_CHECK = OFFSET_ADJUSTMENT*(-1) %} # convert to positive if negative 
      {% else %}
      {% set OFFSET_CHECK = OFFSET_ADJUSTMENT %}
      {% endif %}

      {% if printer["gcode_macro AUTO_OFFSET"].max_adjustment < OFFSET_CHECK %} # prevents adjustments greater than the max adjustment value
         { action_raise_error('Adjustment is greater than the max adjustment value allows.') }
      {% endif %}

      SET_GCODE_OFFSET Z={OFFSET_ADJUSTMENT}

    {% else %}
      { action_raise_error('You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.') }
    {% endif %}

[gcode_macro HOME_X] #Sensorless Homing only!
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G0 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro HOME_Y] #Sensorless Homing only!
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G0 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro HOME_PROBE]
gcode:
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set PROBE_RETRACT = printer.configfile.settings.probe.sample_retract_dist %}
    {% set PROBE_LIFT_SPEED = printer.configfile.settings.probe.lift_speed %}
    {% set PROBE_SPEED = printer.configfile.settings.probe.speed %}
    {% set th = printer.toolhead %}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} F30000
    SET_KINEMATIC_POSITION Z={th.axis_maximum.z}
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED}
    G91
    G0 Z{PROBE_RETRACT - PROBE_OFFSET} F{PROBE_LIFT_SPEED*60}
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED/2}
    SET_KINEMATIC_POSITION Z={PROBE_OFFSET}
    G91
    G0 Z10

[gcode_macro HOME_ENDSTOP]
variable_endstop_x : 203
variable_endstop_y : 252.5
gcode:
    {% set HOME_TEMP = 200 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}
    {% set MIN_TEMP = HOME_TEMP - 5 %}
    {% set th = printer.toolhead %}

     {% if TARGET_TEMP < HOME_TEMP %}
         { action_respond_info('Extruder temperature target of %.1fC is too low, increasing to %.1fC' % (TARGET_TEMP, HOME_TEMP)) }
        M109 S{HOME_TEMP}

     {% else %}
        {% if ACTUAL_TEMP < MIN_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too low, waiting until above %.1fC' % (ACTUAL_TEMP, MIN_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={MIN_TEMP}
        {% endif %}
     {% endif %}
    G90
    G0 X{endstop_x} F30000
    G0 Y{endstop_y} F30000
    G28 Z
    G91
    G0 Z25

[gcode_macro SAFE_LIFT_Z]
description: Lifts Z only if it's save
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z

[gcode_macro SMARTHOME]
description: Only homes if necessary 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

[gcode_macro IDLE_POS]
description: Move the printhead to a idle position
gcode:
    {% set th = printer.toolhead %}
    SAVE_GCODE_STATE NAME=IDLE_POS
    SMARTHOME
    M106 S0
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z{th.axis_maximum.z-50} F30000
    RESTORE_GCODE_STATE NAME=IDLE_POS

[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    M83
    G1 E50 F1000
    G1 E20 F1000
    G1 E30 F300
    G1 E30 F300
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    M83
    G1 E10 F300
    G1 E-50 F1000
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

#####################################################################
# 	Misc
#####################################################################
[force_move]
enable_force_move: True