#####################################################################
# 	Macros
#####################################################################
[gcode_macro AUTO_OFFSET]
description: Calibrate your first layer
variable_switch_state : 0
gcode:
    SAVE_GCODE_STATE NAME=AUTO_OFFSET
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set PROBE_TEMP = params.PROBE_TEMP|default(180)|float %}
    {% set th = printer.toolhead %} 

    G91
    G0 Z25 F120
    {% if switch_state == 1 %}
      M112
     {% endif %}

    
#    SMARTHOME
#    G90
#    G0 X{th.axis_minimum.x + 10} Y{th.axis_maximum.y - 10} Z30 F30000
#    M109 S{EXTRUDER_TEMP}
#    G4 P15000 # 15 sec
#    CLEAN_NOZZLE
#    SET_GCODE_OFFSET Z=0
#    HOME_Z
#    HOME_Z
#    G91
#    SAVE_GCODE_STATE NAME=AUTO_OFFSET_HEAT
#    G90
#    G0 X{th.axis_minimum.x + 10} Y{th.axis_maximum.y - 10} Z30 F30000
#    M106 S255
#    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={PROBE_TEMP + 5}
#    M106 S0
#    M109 S{PROBE_TEMP}
#    G4 P15000 # 15 sec
#    RESTORE_GCODE_STATE NAME=AUTO_OFFSET_HEAT
#    G0 X0 Y0 Z0 F30000
#    PROBE samples=3 speed=3.0 samples_tolerance=0.0025 samples_tolerance_retries=3#
#
#    AUTO_OFFSET_CALCULATION

#    G91
#    G1 Z25 F30000
#    RESTORE_GCODE_STATE NAME=AUTO_OFFSET


[gcode_macro AUTO_OFFSET_CALCULATION]
description: Calculate the probe offset
variable_parameter_OFFSET_CORRECTION : 0
gcode:
    SAVE_GCODE_STATE NAME=AUTO_OFFSET_CALCULATION
    {% set OFFSET_CORRECTION = params.OFFSET_CORRECTION|default(0.065)|float %} # finetune squish
    {% set PROBE_RESULT = printer.probe.last_z_result %}
    {% set Z_ENDSTOP_OFFSET = printer.configfile.settings.stepper_z.position_endstop %}
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}

    {% set ADJUST_OFFSET = (PROBE_RESULT - (Z_ENDSTOP_OFFSET + PROBE_OFFSET))*(-1)  %}

    SET_GCODE_OFFSET Z={ADJUST_OFFSET + OFFSET_CORRECTION}

    RESTORE_GCODE_STATE NAME=AUTO_OFFSET_CALCULATION

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    {% set th = printer.toolhead %}
    # Home
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} F30000
    G28 Z
    # Move away
    G91
    G1 Z+10 F1200

[duplicate_pin_override]
pins:sb2040:gpio28

[gcode_button AUTO_OFFSET_SWITCH]
pin: ^sb2040:gpio28
press_gcode: SET_GCODE_VARIABLE MACRO=AUTO_OFFSET VARIABLE=switch_state VALUE=1
release_gcode: SET_GCODE_VARIABLE MACRO=AUTO_OFFSET VARIABLE=switch_state VALUE=0


[force_move]
enable_force_move: True

[gcode_macro HOME_TAB]
gcode:
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set PROBE_RETRACT = printer.configfile.settings.probe.sample_retract_dist %}
    {% set PROBE_LIFT_SPEED = printer.configfile.settings.probe.lift_speed %}
    {% set PROBE_SPEED = printer.configfile.settings.probe.speed %}
    {% set th = printer.toolhead %}

    SAVE_GCODE_STATE NAME=HOME_TAB
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} F30000
    SET_KINEMATIC_POSITION Z={th.axis_maximum.z}
    PROBE SPEED={PROBE_SPEED} SAMPLES=1
    G91
    G0 Z{PROBE_RETRACT - PROBE_OFFSET} F{PROBE_LIFT_SPEED*60}
    PROBE SPEED={PROBE_SPEED//2} SAMPLES=1
    SET_KINEMATIC_POSITION Z={PROBE_OFFSET}
    G90
    G0 Z10
    RESTORE_GCODE_STATE NAME=HOME_TAB

[gcode_macro HOME_Z]
gcode:
    {% set X_ENDSTOP = 203 %}
    {% set Y_ENDSTOP = 253 %}
    {% set HOME_TEMP = 180 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}
    {% set MIN_TEMP = HOME_TEMP - 5 %}
    {% set th = printer.toolhead %}

    SAVE_GCODE_STATE NAME=HOME_Z

     {% if TARGET_TEMP < HOME_TEMP %}
         { action_respond_info('Extruder temperature target of %.1fC is too low, increasing to %.1fC' % (TARGET_TEMP, HOME_TEMP)) }
        M109 S{HOME_TEMP}

     {% else %}
        {% if ACTUAL_TEMP < MIN_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too low, waiting until above %.1fC' % (ACTUAL_TEMP, MIN_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={MIN_TEMP}
        {% endif %}
     {% endif %}
    G90
    G0 X{X_ENDSTOP} F10000
    G0 Y{Y_ENDSTOP} F10000
    G28 Z
    G91
    G0 Z25
    RESTORE_GCODE_STATE NAME=HOME_Z

[gcode_macro PRINT_START]
description: Perform calibration and get ready to print
variable_parameter_EXTRUDER_TEMP : 0
variable_parameter_BED_TEMP : 0
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set PROBE_TEMP = 180 %}
    {% set th = printer.toolhead %}

#########################################
#             Macro Start               #
#########################################
    CLEAR_PAUSE
    BED_MESH_CLEAR

    M107
    M117 Homing..
    G28
    G0 X{th.axis_minimum.x + 10} Y{th.axis_maximum.y - 3} Z30 F30000
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP} 
    M109 S{EXTRUDER_TEMP}               ; wait for extruder temperature
    M190 S{BED_TEMP}                    ; wait for bed temprature

    AUTO_OFFSET EXTRUDER_TEMP={EXTRUDER_TEMP} PROBE_TEMP={PROBE_TEMP}

    M109 S{PROBE_TEMP}               ; wait for extruder temperature
    M190 S{BED_TEMP}                    ; wait for bed temprature

    M117 Cleaning..
    CLEAN_NOZZLE

    M117 Gantry adjust..
    QUAD_GANTRY_LEVEL
    HOME_TAB

    M117 Bed Mesh calibrate..
    PRINT_AREA_BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}

    G90
    G0 X{th.axis_minimum.x + 10} Y{th.axis_maximum.y - 3} Z30 F30000

    M109 S{EXTRUDER_TEMP}

    CLEAN_NOZZLE
    M117 Cleaning..

    SHOW_BUILD_SHEET

    PURGE_LINE PRINT_START_X={params.AREA_START.split(",")[0]} PRINT_START_Y={params.AREA_START.split(",")[1]}

    M117

[gcode_macro PRINT_AREA_BED_MESH_CALIBRATE]
description: Only create a bed mesh the size of the printing area
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

    {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
    	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE
    {% endif %}

[gcode_macro PURGE_LINE]
description: Prime the nozzle
gcode:
    SAVE_GCODE_STATE NAME=PURGE_LINE
    {% set purge_start_x = params.PRINT_START_X|default(5.0)|float %}
    {% set purge_start_y = params.PRINT_START_Y|default(5.0)|float - 5 %}
    ; 5 mm offset

    ; purge/prime nozzle
    G90 ; use absolute coordinates
    ; go to the start of the print area
    G1 X{purge_start_x} Y{purge_start_y} Z0.3 F30000 ; go to the purge start location
    G91 ; relative coordinates
    M83 ; extruder relative mode
    G92 E0.0
    G1 E10.0 F3600
    G1 X40.0 E10.0 F1000.0  ; narrow start line
    G1 X40.0 E15.0 F1000.0  ; priming thick outro line
    G92 E0.0
    G1 X3.0 Y3.0 F1000.0    ; move the nozzle away from the end of the purge line so the print doesnt drage the nozzle back throught it.
    G1 F7200.0

    RESTORE_GCODE_STATE NAME=PURGE_LINE

[gcode_macro M600]
description: Prusaslicer and Superslicer color change
gcode:
    PAUSE
    SAFE_LIFT_Z Z=25 F=3000.0

[gcode_macro PRINT_END]
description: The end of every print. Turn off heaters etc.
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 3} F3600  ; park nozzle at rear
    SAFE_LIFT_Z Z=50 F=3000.0
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0
    SET_FAN_SPEED FAN=nevermore_fan SPEED=0.0
    SET_VELOCITY_LIMIT ACCEL=10000
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M18 ; turn off motors

[gcode_macro SAFE_LIFT_Z]
description: Lifts Z only if it's save
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z

[gcode_macro SMARTHOME]
description: Only homes if necessary 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

[gcode_macro IDLE_POS]
description: Move the printhead to a idle position
gcode:
    {% set th = printer.toolhead %}
    SAVE_GCODE_STATE NAME=IDLE_POS
    SMARTHOME
    M106 S0
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z{th.axis_maximum.z-50} F30000
    RESTORE_GCODE_STATE NAME=IDLE_POS

[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    M83
    G1 E50 F1000
    G1 E20 F1000
    G1 E30 F300
    G1 E30 F300
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    M83
    G1 E10 F300
    G1 E-50 F1000
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro HEAT_SOAK]
description: Heats the chamber with the bed

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
      CLEAR_PAUSE
    {% set TARGET = params.TARGET | default(110) | float %}
    {% set DURATION = (params.DURATION | default(20) | int) * 60 %} ## minutes to seconds
    {% set th = printer.toolhead %}

      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

      ;; fire up the heater
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
      SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

      ;; run the fan to circulate air
      M106 S255

      ;; put the bed and nozzle where they're a safe distance apart
      SMARTHOME
      G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z5 F3600
  
      M84 ;; turn off steppers
  
      UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }
  
      ;; pause the print during heat soak
      PAUSE_BASE

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }

            ;; heat soak was cancelled -- also cancel the print
            CANCEL_PRINT
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }

            ;; heat soak is complete. Call the complete macro prior to starting the print
            #SOAK_COMPLETE
            ;; resume / start the print
            RESUME_BASE
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_shell_command auto_backup]
command: sh /home/biqu/printer_data/config/github.sh
timeout: 30.
verbose: True

[delayed_gcode auto_backup]
initial_duration: 1
gcode:
 RUN_SHELL_COMMAND CMD=auto_backup
