# version: 1.0.4 by Ibot

[gcode_macro PRINT_START]
description: Perform calibration and get ready to print
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set PROBE_TEMP = 150 %}
    {% set th = printer.toolhead %}

    {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
    {% set START_X = params.START_X | default(bedMeshConfig.mesh_min.split(",")[0]) | float %}
    {% set START_Y = params.START_Y | default(bedMeshConfig.mesh_min.split(",")[1]) | float %}
    {% set END_X = params.END_X   | default(bedMeshConfig.mesh_max.split(",")[0]) | float %}
    {% set END_Y = params.END_Y   | default(bedMeshConfig.mesh_max.split(",")[1]) | float %}

    CLEAR_PAUSE # clear any pause
    BED_MESH_CLEAR # clear bed mesh
    M107 # turn of cooling fan

    G28 # Home all axes

    G90 # absolute positioning
    G0 X{th.axis_maximum.x//2} Y{th.axis_minimum.y + 5} Z75 F6000 # move x to middle, y to (y_min + 5mm)

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP} 
    M109 S{PROBE_TEMP}               # wait for extruder temperature
    M190 S{BED_TEMP}                    # wait for bed temprature


    BED_MESH_CALIBRATE START_X={START_X} END_X={END_X} START_Y={START_Y} END_Y={END_Y}  # Auto bed leveling

    G90 # absolute positioning
    G0 X{th.axis_maximum.x//2} Y{th.axis_minimum.y + 5} Z75 F6000 #nozzle cleaning position

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    M109 S{EXTRUDER_TEMP} # Wait for extruder to reach temp before proceeding

    PURGE_LINE PRINT_START_Y={START_Y - 3}

[gcode_macro PURGE_LINE]
description: Prime the nozzle
gcode:
    SAVE_GCODE_STATE NAME=PURGE_LINE
    {% set purge_start_x = params.PRINT_START_X|default(5.0)|float %}
    {% set purge_start_y = params.PRINT_START_Y|default(3.0)|float %}

    # purge/prime nozzle
    G90 # use absolute coordinates
    # go to the start of the print area
    G1 X{purge_start_x} Y{purge_start_y} Z0.3 F9000 # go to the purge start location
    G91 # relative coordinates
    M83 # extruder relative mode
    G92 E0.0
    G1 X100.0 E100.0 F550  # thick start line
    G1 X25.0 E25.0 F1800.0  # thin outro line
    G1 X5.0 E0.0 F1800.0
    G92 E0                                                                              # Reset extruder distance
    G0 Z0.5 F1800 # Z hop
    G1 F30000
    RESTORE_GCODE_STATE NAME=PURGE_LINE

[gcode_macro PRINT_END]
description: The end of every print. Turn off heaters etc.
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           # wait for buffer to clear
    G92 E0                         # zero the extruder
    G1 E-10.0 F3600                 # retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      # absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  # move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 3} F3600  # park nozzle at rear
    SAFE_LIFT_Z Z=50 F=3000.0 # Move to max Z
    M107                                     # turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M18 # turn off motors

[gcode_macro SAFE_LIFT_Z]
description: Lifts Z only if it's save
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z

[gcode_macro SMARTHOME]
description: Only homes if necessary 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

[gcode_macro IDLE_POS]
description: Move the printhead to a idle position
gcode:
    {% set th = printer.toolhead %}
    SAVE_GCODE_STATE NAME=IDLE_POS
    SMARTHOME
    M106 S0
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z{th.axis_maximum.z-50} F6000
    RESTORE_GCODE_STATE NAME=IDLE_POS

[gcode_macro SMARTHOME]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unloads Filament from extruder
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
    M83
    G1 E10.0 F300        # extrude a little
    G1 E-50 F{ 50 * 60 } # perform the unload
    G1 E-50 F{ 50 * 60 }   # finish the unload
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT
  {% endif %}
 
[gcode_macro LOAD_FILAMENT]
description: Loads filament into the extruder
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    M83
    G1 E50 F{ 15 * 60 }  # extrude
    G1 E50.0 F{ 5 * 60 }  # extrude a little more
    G1 E-5.0 F{ 30 * 60 }  # retract
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
  {% endif %}


#####################################################################
# 	Integration of mainsail.cfg
#####################################################################

## Mainsail klipper macro definitions
##
## Copyright (C) 2022 Alex Zellner <alexander.zellner@googlemail.com>
##
## This file may be distributed under the terms of the GNU GPLv3 license

## Version 2.0

## add [include macros.cfg] to your printer.cfg

## Customization:

#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos  : False ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 5.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : 5.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz  : 30.0   ; custom dz value; the value in mm to lift the nozzle when move to park position 
#variable_retract         : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract  : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract   : 35.0  ; retract speed in mm/s
#variable_unretract       : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract : 35.0  ; unretract speed in mm/s
#variable_speed_hop       : 15.0  ; z move speed in mm/s
#variable_speed_move      : 100.0 ; move speed in mm/s
#variable_park_at_cancel  : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
#gcode:

## After you uncomment it add your custom values

## You now can use your PAUSE macro direct in your M600 here a short example:

#[gcode_macro M600]
#description: Filament change
#gcode: PAUSE

## That will park your head front left with a minimum hight of 50mm above the bed. If your head
## is already above 50mm it will use only the z_hop specified with dz.

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  STOP_HEAT_SOAK
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params} 

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}