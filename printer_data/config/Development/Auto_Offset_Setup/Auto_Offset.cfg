# Auto-Offset-Calibration by Ibot_11
# Github: https://github.com/Ibot-11/Tap-Automatic-Offset-Calibration
# Licensed under AGPL-3.0 license
# Version 2.2.0

[include Auto_Offset_Settings.cfg]

#  __  __                              
# |  \/  |  __ _   __   _ _   ___   ___
# | |\/| | / _` | / _| | '_| / _ \ (_-<
# |_|  |_| \__,_| \__| |_|   \___/ /__/
#
[gcode_macro AUTO_OFFSET_START]
description: Start macro including Heating, QUAD_GANTRY_LEVEL, AUTO_OFFSET and BED_MESH_LEVEL
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set th = printer.toolhead %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(-1)|float %} # required. -1 is a dummy value. Used to error if undefined
    {% set BED_TEMP = params.BED_TEMP|default(-1)|float %} # required. -1 is a dummy value. Used to error if undefined

    {% if EXTRUDER_TEMP == -1 %}
      AUTO_OFFSET_ERROR_LIFT TEXT={'In order to run this AUTO_OFFSET_START you have to specify EXTRUDER_TEMP and BED_TEMP.'|string} # errors if runned without extruder or bed temperature
    {% endif %}

    {% if BED_TEMP == -1 %}
      AUTO_OFFSET_ERROR_LIFT TEXT={'In order to run this AUTO_OFFSET_START you have to specify EXTRUDER_TEMP and BED_TEMP.'|string} # errors if runned without extruder or bed temperature
    {% endif %}
	
	AUTO_OFFSET_CONFIG_CHECK

    G28 # home printer

    {% if EXTRUDER_TEMP < auto_offset.dynamic_probe_temp_threshold %} # Use dynamic probe temperature
      {% set PROBE_TEMP = auto_offset.dynamic_probe_temp_min|default(-1)|float %}
    {% elif EXTRUDER_TEMP >= auto_offset.dynamic_probe_temp_threshold %}
      {% set PROBE_TEMP = auto_offset.dynamic_probe_temp_max|default(-1)|float %}
    {% endif %}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP} 
    M109 S{PROBE_TEMP} # wait for extruder temperature
    M190 S{BED_TEMP} # wait for bed temprature

    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro

    QUAD_GANTRY_LEVEL

    G28 Z

    AUTO_OFFSET EXTRUDER_TEMP={EXTRUDER_TEMP}

	{% if auto_offset.integrated_thermal_compensation == True %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
      G90
      G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center
      M106 S255 # turn on part cooling fan
      M109 S{PROBE_TEMP} # wait for extruder temperature
      M107 # turn off part cooling fan
	{% endif %}

    G28 Z
    
    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro
    
    BED_MESH_CALIBRATE # calibrate mesh
	
	G90
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000
	M109 S{EXTRUDER_TEMP}
	
    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro



[gcode_macro AUTO_OFFSET]
description: Calibrate your first layer
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set plate = printer['gcode_macro ' + auto_offset.plate_name] %} # plate.offset_correction for example will give you the correction value of the active plate (auto_offset.plate_name)
    {% set th = printer.toolhead %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(-1)|float %} # required for dynamic probe temp. -1 is a dummy value. Used to error if undefined
    {% set SAMPLES = params.SAMPLES|default(auto_offset.default_samples)|int %} # params sample amount. Use defined default if not set
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %} # current probe offset

    {% if EXTRUDER_TEMP == -1 %}
      AUTO_OFFSET_ERROR_LIFT TEXT={'In order to run this macro you have to specify EXTRUDER_TEMP.'|string} # errors if runned without extruder temperature
    {% endif %}

    AUTO_OFFSET_VARIABLES # reset variables
	
	AUTO_OFFSET_CONFIG_CHECK

    {% if EXTRUDER_TEMP < auto_offset.dynamic_probe_temp_threshold %} # Use dynamic probe temperature
      {% set PROBE_TEMP = auto_offset.dynamic_probe_temp_min|default(-1)|float %}
    {% elif EXTRUDER_TEMP >= auto_offset.dynamic_probe_temp_threshold %}
      {% set PROBE_TEMP = auto_offset.dynamic_probe_temp_max|default(-1)|float %}
    {% endif %}
	
	{% if printer.toolhead.homed_axes != "xyz" %} #Smarthome. Homes if not homed; Must be in front of auto_offset_state=True
        G28
    {% endif %}

    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=auto_offset_state VALUE=True # set state to true. This is a feature that prevents running other AUTO_OFFSET macros directly. Like AUTO_OFFSET_ADJUSTMENT
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=probe_temp VALUE={PROBE_TEMP}
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=samples VALUE={SAMPLES}

    AUTO_OFFSET_INFO TEXT='{'Selected Plate: %s. Correction value: +%.3f'|format(auto_offset.plate_name, plate.offset_correction)|string}' # show selected plate

    SET_GCODE_OFFSET Z=0 # remove any correction before calibration

    {% if printer.extruder.temperature < PROBE_TEMP - 3 or printer.extruder.target != PROBE_TEMP or printer.extruder.temperature > PROBE_TEMP + 3 %} # heat nozzle if not at probing temp already or target is below probe temp
      G90
      G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center
      M109 S{PROBE_TEMP} # heat up to probe temp
      G4 P10000 # wait 10 sec to stabilize
    {% endif %}

    AUTO_OFFSET_CRASH_PROTECTION

    G91
    G0 Z{(PROBE_OFFSET*(-1)) + auto_offset.max_adjustment * 2} F30000 # move up by z-offset + max_adjustment value * 1.25

	{% if auto_offset.integrated_thermal_compensation == True %} # add sample for thermal sample
      {% set SAMPLES = SAMPLES + 1|int %}
	{% endif %}
    
    {% for _ in range(SAMPLES) %} # Loop for samples
      AUTO_OFFSET_SAMPLE # do samples
    {% endfor %}

    G91
    G0 Z10 # raise 10mm

    AUTO_OFFSET_ADJUSTMENT # apply adjustment
    AUTO_OFFSET_VARIABLES # reset variables



[gcode_macro AUTO_OFFSET_CRASH_PROTECTION]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples

	AUTO_OFFSET_STATE_CHECK

    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro
    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} Z10 F30000 # move to endstop position
    PROBE SAMPLES=5 SAMPLES_TOLERANCE_RETRIES=10 # some probes to squish away any material before doing measurements

    AUTO_OFFSET_VIBRATION_CLEANING

    G4 P1000 # wait 1 second
    QUERY_ENDSTOPS # must query endstops before doing AUTO_OFFSET_CRASH_PROTECTION. You can't do this in AUTO_OFFSET_CRASH_PROTECTION itself
    AUTO_OFFSET_CRASH_PROTECTION_CHECK # detects if endstop is triggered if tap touches it. Prevents crashes if homing failed or similar.



[gcode_macro AUTO_OFFSET_CRASH_PROTECTION_CHECK]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set STATE = printer.query_endstops.last_query.z %} # get last query result

	AUTO_OFFSET_STATE_CHECK

    {% if STATE == 0 and auto_offset.crash_protection_retry == False %} # if not triggered and retry is disabled...
      AUTO_OFFSET_ERROR_LIFT TEXT='{'CRASH PROTECTION triggered! Printer may homed incorrectly!'|string}' # errors if endstop is not triggered
    {% elif STATE == 0 and auto_offset.crash_protection_retry == True %} # if not triggered and retry is enabled...
      AUTO_OFFSET_INFO TEXT='{'CRASH PROTECTION triggered! Retrying...'|string}' # info if endstop is not triggered
      AUTO_OFFSET_CRASH_PROTECTION_RETRY # retry with multiple nozzle cleaning. A for loop does not work so i have to add additional macros
    {% elif STATE == 1 %} # if triggered
      # do nothing if endstop triggers like expected
    {% else %} # if state is not 0 or 1...
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Something went wrong. Unknown query state. Check your macro setup.'|string}' # errors if state is not 0 or 1
    {% endif %}



[gcode_macro AUTO_OFFSET_CRASH_PROTECTION_RETRY]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples

    {% if auto_offset.auto_offset_state == False %} # prevents direct use. This is only a protection module that can be called via AUTO_OFFSET
      AUTO_OFFSET_ERROR TEXT={'You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.'|string} # errors if macro is called directly
    {% endif %}

    {% for _ in range(auto_offset.crash_protection_retry_nozzle_cleaning) %} # Loop for nozzle cleaning
      {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro
    {% endfor %}

    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} Z10 F30000 # move to endstop position
    PROBE SAMPLES=5 SAMPLES_TOLERANCE_RETRIES=10 # some probes to squish away any material before doing measurements

    #AUTO_OFFSET_VIBRATION_CLEANING

    G4 P1000 # wait 1 second
    QUERY_ENDSTOPS # must query endstops before doing AUTO_OFFSET_CRASH_PROTECTION. You can't do this in AUTO_OFFSET_CRASH_PROTECTION_RETRY itself
    AUTO_OFFSET_CRASH_PROTECTION_CHECK_RETRY # And another macro, because a for loop does not work...



[gcode_macro AUTO_OFFSET_CRASH_PROTECTION_CHECK_RETRY]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set STATE = printer.query_endstops.last_query.z %} # get last query result

	AUTO_OFFSET_STATE_CHECK

    {% if STATE == 0 %} # if still not triggered...
      AUTO_OFFSET_ERROR_LIFT TEXT='{'CRASH PROTECTION triggered! Printer may homed incorrectly!'|string}' # errors if endstop is not triggered
    {% elif STATE == 1 %} # if triggered
      # do nothing if endstop triggers like expected
    {% else %} # if state is not 0 or 1...
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Something went wrong. Unknown query state. Check your macro setup.'|string}' # errors if state is not 0 or 1
    {% endif %}

[gcode_macro AUTO_OFFSET_VIBRATION_CLEANING]
description: Cleaning module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples

	AUTO_OFFSET_STATE_CHECK

      {% set ACCEL = printer.toolhead.max_accel %}
      {% set ACCEL_DECEL = printer.toolhead.max_accel_to_decel %}

    SET_VELOCITY_LIMIT ACCEL=20000
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=20000

      G91
      G0 X0.25 F30000
    {% for _ in range(300) if auto_offset.vibration_cleaning == True %}
      G91
      G0 X-0.5 F30000
      G0 X0.5 F30000
    {% endfor %}
      G91
      G0 X-0.25 F30000

    SET_VELOCITY_LIMIT ACCEL={ACCEL}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={ACCEL_DECEL}




[gcode_macro AUTO_OFFSET_SAMPLE]
description: Sample module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
	{% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}

	AUTO_OFFSET_STATE_CHECK

    G28 E # home with endstop

	{% if auto_offset.sample_results[:-1].split(",") | length == auto_offset.samples %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET={auto_offset.extruder_temp}
		G91
		G0 Z10
		M109 S{auto_offset.extruder_temp}
        G4 P10000 # wait 10 sec to stabilize
		PROBE SAMPLES=5 SAMPLES_TOLERANCE_RETRIES=10 # some probes to squish away any material before doing measurements
		G91
		G0 Z{(PROBE_OFFSET*(-1)) + auto_offset.max_adjustment * 2} # move up by z-offset + max_adjustment value * 1.25
	{% endif %}
	
    PROBE SAMPLES=3 SAMPLES_TOLERANCE_RETRIES=5 # probe on endstop
    G0 Z{(PROBE_OFFSET*(-1)) + auto_offset.max_adjustment * 1.5} # move up by z-offset + max_adjustment value

    AUTO_OFFSET_CALCULATION # do calculation



[gcode_macro AUTO_OFFSET_CALCULATION]
description: Calculate module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set THERMAL_SAMPLE = params.THERMAL_SAMPLE | default(False) %}
	{% set PROBE_RESULT = printer.probe.last_z_result %}
    {% set Z_ENDSTOP_OFFSET = printer.configfile.settings.stepper_z.position_endstop %}
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set SAMPLE_RESULTS = auto_offset.sample_results %} # get values from variable and set them as SAMPLE_RESULTS

	AUTO_OFFSET_STATE_CHECK

    ### CALCULATION! ###
	{% set SAMPLE_RESULT = ((PROBE_RESULT - (Z_ENDSTOP_OFFSET + PROBE_OFFSET))*(-1)) %} # calculate gcode offset adjustment

	{% if auto_offset.sample_results[:-1].split(",") | length == auto_offset.samples %}
	    AUTO_OFFSET_INFO TEXT='{'Thermal sample result: %.4f'|format(SAMPLE_RESULT)|string}' # show sample result
		SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=thermal_sample_result VALUE={SAMPLE_RESULT | round(4)} # set variable for thermal sample. Invert value since endstop@extruder_temp -> probe@probe_temp would be the right. Since you can't do this order you have to do it this way
	{% else %}
	    AUTO_OFFSET_INFO TEXT='{'Sample result: %.4f'|format(SAMPLE_RESULT)|string}' # show sample result
		{% set SAMPLE_RESULTS = SAMPLE_RESULTS ~ SAMPLE_RESULT | round(4) ~ "," %} # add last sample result. Round result
		SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=sample_results VALUE="'{SAMPLE_RESULTS}'" # add all last samples + new sample. Will be divided by AUTO_OFFSET_ADJUSTMENT. Saved as string. Not the most elegant solution, but works great
	{% endif %}
		
		
		
[gcode_macro AUTO_OFFSET_ADJUSTMENT]
description: Adjustment module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set plate = printer['gcode_macro ' + auto_offset.plate_name] %} # plate.offset_correction for example will give you the correction value of the active plate (auto_offset.plate_name)

	AUTO_OFFSET_STATE_CHECK

    ### Show all samples ###
    {% set SAMPLE_RESULTS = auto_offset.sample_results[:-1] %} # remove last ,
		{ action_respond_info('Samples:\n%s' % (SAMPLE_RESULTS.replace(",", "\n"))) } # show all samples
	{% if auto_offset.thermal_sample_result != 0 %}
		AUTO_OFFSET_INFO TEXT='{'Thermal sample: %.4f'|format(auto_offset.thermal_sample_result)|string}' # show thermal sample result
	{% endif %}

    ### Calculate delta & show max deviation ###
    {% set SAMPLE_RESULTS_LIST = SAMPLE_RESULTS.split(",") | map('float') | list %} # convert to list
    {% set DELTA_SAMPLE_RESULTS = SAMPLE_RESULTS_LIST | max - SAMPLE_RESULTS_LIST | min %} # calculate deviation
    {% if SAMPLE_RESULTS_LIST | length > 1 %} # only show deviation when more than 2 samples
        AUTO_OFFSET_INFO TEXT='{'Deviation: %.4f'|format(DELTA_SAMPLE_RESULTS)|string}' # show deviation
    {% endif %}

    ### Calculate average result & show it ###
    {% set AVERAGE_SAMPLE_RESULT = SAMPLE_RESULTS.split(",") | map('float') | sum / SAMPLE_RESULTS.split(",") | length %}
      AUTO_OFFSET_INFO TEXT='{'Average result: %.4f'|format(AVERAGE_SAMPLE_RESULT)|string}' # show average result
      SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=last_average VALUE={AVERAGE_SAMPLE_RESULT}

    ### Calculate thermal compensation ###
	{% if auto_offset.integrated_thermal_compensation == True %}
      {% set THERMAL_ADJUSTMENT = AVERAGE_SAMPLE_RESULT - auto_offset.thermal_sample_result %}
      AUTO_OFFSET_INFO TEXT='{'Thermal compensation: %.4f'|format(THERMAL_ADJUSTMENT)|string}'
	{% elif auto_offset.calculated_thermal_compensation == True %}
	  {% set THERMAL_ADJUSTMENT = auto_offset.coefficient_thermal_compensation * (auto_offset.extruder_temp - auto_offset.probe_temp) %}
    {% else %}
      {% set THERMAL_ADJUSTMENT = 0 %}
    {% endif %}

    AUTO_OFFSET_INFO TEXT='{'Selected Plate: %s. Correction value: +%.3f'|format(auto_offset.plate_name, plate.offset_correction)|string}' # show selected plate again

    ### Calculate actual adjustment based on the average value & show it ###
    {% set ADJUSTMENT = AVERAGE_SAMPLE_RESULT + THERMAL_ADJUSTMENT + plate.offset_correction %} # Calculated adjustment + thermal compenastion value + plate specific correction. plate specific correction -> You need some extra distance between nozzle and plate. Value depents on the plate surface type
      AUTO_OFFSET_INFO TEXT='{'Adjustment: %.4f'|format(ADJUSTMENT)|string}' # show adjustment result

    ### Protection features ###
    {% if plate.offset_correction < 0 %} # prevent offset corrections below 0
      AUTO_OFFSET_ERROR_LIFT TEXT='{'NEGATIVE offset corrections are NOT ALLOWED! A negative value would scrape your bed! Current value: %.1fC'|format(plate.offset_correction)|string}'
    {% endif %}

    {% if ADJUSTMENT > auto_offset.max_adjustment or ADJUSTMENT < -auto_offset.max_adjustment %} # prevents adjustments greater than the max adjustment value
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Adjustment is greater than the max adjustment value allows.'|string}'
    {% endif %}

    {% if DELTA_SAMPLE_RESULTS > auto_offset.max_deviation %} # errors if deviation is greater than max allowed deviation
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Meassured deviation (%.4f) is greater than allowed deviation (%.4f)'|format(DELTA_SAMPLE_RESULTS, auto_offset.max_deviation)|string}'
    {% endif %}

    {% if THERMAL_ADJUSTMENT < 0 %} # errors if thermal adjustment is negative
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Thermal adjustment value can not be negative. Something is wrong. (Measured value: %.4f)'|format(THERMAL_ADJUSTMENT)|string}'
    {% endif %}

    {% if THERMAL_ADJUSTMENT > auto_offset.max_thermal_adjustment %} # errors if thermal adjustment value is too high
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Thermal adjustment value (%.4f) is greater than allowed adjustment (%.4f)'|format(THERMAL_ADJUSTMENT, auto_offset.max_thermal_adjustment)|string}'
    {% endif %}
    

    ### Apply value with SET_GCODE_OFFSET ###
    SET_GCODE_OFFSET Z={ADJUSTMENT}
	
	
	
[gcode_macro AUTO_OFFSET_CONFIG_CHECK]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set config = printer.configfile.settings %}
	
	{% if auto_offset.config_check == True %}

	  ### stepper_z endstop_pin ###
	  {% if config.stepper_z.endstop_pin == "probe:z_virtual_endstop" %}
        AUTO_OFFSET_ERROR TEXT={'You have to set a endstop pin.'|string}'
      {% endif %}
	
	  ### stepper_z homing speed ###
	  {% if config.stepper_z.homing_speed > 0.5 %}
        AUTO_OFFSET_ERROR TEXT={'Your homing_speed is too high (%.1f). Allowed: <0.5mm/s'|format(config.stepper_z.homing_speed)|string}'
      {% endif %}
	
	  ### stepper_z second homing speed ###
	  {% if config.stepper_z.second_homing_speed > 0.05 %}
        AUTO_OFFSET_ERROR TEXT={'Your second_homing_speed is too high (%.1f). Allowed: <0.05mm/s'|format(config.stepper_z.second_homing_speed)|string}'
      {% endif %}
	
	  ### stepper_z homing speed retract ###
	  {% if config.stepper_z.homing_retract_dist > 0.5 or config.stepper_z.homing_retract_dist < 0.1 %}
        AUTO_OFFSET_ERROR TEXT={'Your homing_retract_distance is too high/low(%.1f).'|format(config.stepper_z.homing_retract_dist)|string}'
      {% endif %}
	  
	  ### zero_reference_position, relative_reference_index ###
	  {% if config.bed_mesh.relative_refrence_index is defined or config.bed_mesh.zero_refrence_position is defined %}
        AUTO_OFFSET_ERROR TEXT={'zero_reference_position or relative_reference_index is not allowed when using AUTO_OFFSET.'|string}'
      {% endif %}
	
	  ### Thermal compensation ###
	  {% if auto_offset.integrated_thermal_compensation == True and auto_offset.calculated_thermal_compensation == True %}
        AUTO_OFFSET_ERROR TEXT={'You cannot enable integrated_thermal_compensation and calculated_thermal_compensation at the same time'|string}'
      {% endif %}
	  
	{% endif %}
	
	
	
[gcode_macro AUTO_OFFSET_STATE_CHECK]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
	
	{% if auto_offset.auto_offset_state == False %} # prevents direct use.
      AUTO_OFFSET_ERROR TEXT={'You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.'|string} # errors if macro is called directly
    {% endif %}
	



#  _  _                 _                   __         ___               _      _               
# | || |  ___   _ __   (_)  _ _    __ _    / _|___    | _ \  _ _   ___  | |__  (_)  _ _    __ _ 
# | __ | / _ \ | '  \  | | | ' \  / _` |   > _|_ _|   |  _/ | '_| / _ \ | '_ \ | | | ' \  / _` |
# |_||_| \___/ |_|_|_| |_| |_||_| \__, |   \_____|    |_|   |_|   \___/ |_.__/ |_| |_||_| \__, |
#                                 |___/                                                   |___/ 
[gcode_macro ACTIVATE_PROBE]
description: Gcode when Probe is used
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set PROBE_TEMP = auto_offset.probe_temp %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP + 5 and auto_offset.auto_offset_state == False %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{PROBE_TEMP}
    {% elif ACTUAL_TEMP > PROBE_TEMP + 5 and auto_offset.auto_offset_state == False %}
      # Temperature target is already low enough, but nozzle may still be too hot.
      { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, PROBE_TEMP + 5)) }
      TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={PROBE_TEMP + 5}
    {% endif %}
	
	

[homing_override]
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params and 'E' not in params and 'P' not in params %}

  {% if 'E' in params %}
    HOME_ENDSTOP
  {% endif %}

  {% if 'P' in params %}
    HOME_PROBE
  {% endif %}

  {% if home_all or 'X' in params %}
    HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    HOME_PROBE
  {% endif %}



[gcode_macro HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G0 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
	


[gcode_macro HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G0 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
	


[gcode_macro HOME_PROBE]
gcode:
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set PROBE_RETRACT = printer.configfile.settings.probe.sample_retract_dist %}
    {% set PROBE_LIFT_SPEED = printer.configfile.settings.probe.lift_speed %}
    {% set PROBE_SPEED = printer.configfile.settings.probe.speed %}
    {% set th = printer.toolhead %}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} F30000 # move to bed center
    SET_KINEMATIC_POSITION Z={th.axis_maximum.z} # set Z to max height in order to get max possible travel distance without error
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED*1.5} # Use probe speed * 1.5
    G91
    G0 Z{PROBE_RETRACT - PROBE_OFFSET} F{PROBE_LIFT_SPEED*60} # lift probe for second pass
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED/2} # second pass is probe speed / 2
    SET_KINEMATIC_POSITION Z={PROBE_OFFSET} # Force set position at probe trigger point. Use probe offset to get Z0 position 
    G91
    G0 Z10 # lift up 10mm



[gcode_macro HOME_ENDSTOP]
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set thermal_comp = printer['gcode_macro THERMAL_COMPENSATION_VARIABLES'] %}
    {% set HOME_TEMP = 150 %} # Home temp. A minimum temperature ist required to squish away any material ooze
    {% set ACTUAL_TEMP = printer.extruder.temperature %} # current extruder temp
    {% set TARGET_TEMP = printer.extruder.target %} # extruder target temp
    {% set MIN_TEMP = HOME_TEMP - 5 %} # minimum allowed homing temp. Home temp - 5°C
    {% set th = printer.toolhead %}

    {% if TARGET_TEMP < HOME_TEMP %} # increase temp if target too low
      AUTO_OFFSET_INFO TEXT='{'Extruder temperature target of %.1fC is too low, increasing to %.1fC'|format(TARGET_TEMP, HOME_TEMP)|string}'
      M109 S{HOME_TEMP}

     {% else %}
        {% if ACTUAL_TEMP < MIN_TEMP %} #increase temp if actual temp too low
            AUTO_OFFSET_INFO TEXT='{'Extruder temperature %.1fC is still too low, waiting until above %.1fC'|format(ACTUAL_TEMP, MIN_TEMP)|string}'
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={MIN_TEMP}
        {% endif %}
     {% endif %}
    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} F30000 # move to endstop position
    G28 Z # home Z
    G91
    G0 Z1 # move up 1mm. I don't recommend changing this value
	
	

#####################################################################
# 	Misc
#####################################################################
[force_move] # force_move is required for HOME_PROBE
enable_force_move: True

[gcode_macro AUTO_OFFSET_ERROR]
description: Error macro of Auto_Offset # used to execute commands before erroring. Klipper will skip them if error is called directly
gcode:
    {% set MESSAGE = params.TEXT|default("Unknown Error")|string %} # set errortext
    AUTO_OFFSET_VARIABLES # reset variables
    { action_raise_error(MESSAGE) } # error
	
	

[gcode_macro AUTO_OFFSET_INFO]
description: Info macro of Auto_Offset # used to execute commands before info messages. Klipper will skip them sometimes
gcode:
    {% set MESSAGE = params.TEXT|default("")|string %} # set infotext
    { action_respond_info(MESSAGE) } # error
	
	

[gcode_macro AUTO_OFFSET_ERROR_LIFT]
description: Error macro of Auto_Offset # errors with z-lift and turns heaters off
gcode:
    {% set MESSAGE = params.TEXT|default("Unknown Error")|string %} # set errortext
    {% set Z_HEIGHT = params.Z|default(25)|float %}
    {% set SPEED = params.F|default(printer.gcode_move.speed)|int %}

    TURN_OFF_HEATERS # turn off all heaters
    AUTO_OFFSET_VARIABLES # reset variables

    {% if printer.toolhead.homed_axes != "xyz" %}
      AUTO_OFFSET_ERROR TEXT='{MESSAGE}' # use error macro if unhomed

    {% else %}
      {% set Z_HEIGHT = [Z_HEIGHT, printer.toolhead.axis_maximum.z - printer.toolhead.position.z]|min|float%} # compute the minimum safe upward move size
      G91
      G1 Z{Z_HEIGHT} F{SPEED} # move
      M18 # turn off motors

      AUTO_OFFSET_ERROR TEXT='{MESSAGE}' # use error macro
    {% endif %}