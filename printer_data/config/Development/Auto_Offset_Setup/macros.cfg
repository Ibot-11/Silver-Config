#  __  __                                     
# |  \/  |   __ _    ___   _ __    ___    ___ 
# | |\/| |  / _` |  / __| | '__|  / _ \  / __|
# | |  | | | (_| | | (__  | |    | (_) | \__ \
# |_|  |_|  \__,_|  \___| |_|     \___/  |___/
#                                             
[gcode_macro PRINT_START_VARIABLES]
description: Set variables for print
### Variables (used in PRINT_WARMUP and PRINT_PREPARE) ###
variable_extruder_temp: 200
variable_bed_temp: 60
variable_material: ""
variable_soak_temp : 0
variable_heatsoak_state: False
gcode:
    ### Get Parameters ###
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
	{% set BED_TEMP = params.BED_TEMP|float %}
	{% set SOAK_TEMP = params.SOAK_TEMP|float %}
    {% set MATERIAL = params.MATERIAL|string %}

    ### Set Variables ###  
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=bed_temp VALUE={BED_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=soak_temp VALUE={SOAK_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=material VALUE="'{MATERIAL}'" # set variable

[gcode_macro PRINT_WARMUP]
description: Perform initial heating tasks

gcode: 
    {% set print_start = printer['gcode_macro PRINT_START_VARIABLES'] %} # use print_start instead of printer['gcode_macro PRINT_START_VARIABLES']. Example printer['gcode_macro PRINT_START_VARIABLES.extruder_temp'] -> print_start.extruder_temp
	{% set th = printer.toolhead %}

    CLEAR_PAUSE # abort any pause...

	{% if print_start.material == "ABS" or print_start.material == "ASA" or print_start.material == "PC" or print_start.material == "PA" or print_start.material == "PA-CF" or print_start.material == "HIPS" %} # heatsoak materials (Orcaslicer)
      {% set HEATSOAK_STATE = True %} # if heatsoak is required...
	{% else %}
      {% set HEATSOAK_STATE = False %} # don't soak for any other materials
	{% endif %}

    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=heatsoak_state VALUE={HEATSOAK_STATE} # set a variable. This can be useful for other macros in the future...

	{% if HEATSOAK_STATE == True %} # manage fans depending on material
      ### heated chamber ###
      SET_FAN_SPEED FAN=nevermore_fan SPEED=1 # Nevermore 100%
      SET_FAN_SPEED FAN=exhaust_fan SPEED=0 # Exhaust 0%
	{% elif HEATSOAK_STATE == False %} # why HEATSOAK_STATE and not print_start.heatsoak_state? Because you can't retrieve the value of a variable in the same macro where you set it.
      ### cold chamber ###
      SET_FAN_SPEED FAN=nevermore_fan SPEED=0 # Nevermore 0%
      SET_FAN_SPEED FAN=exhaust_fan SPEED=1 # Exhaust 100%
	{% endif %}

	G28 # home
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={print_start.extruder_temp * 0.3} # Heatsoak extruder idle temperature. Hotend fans should run...

	G90 # absolute move
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z5 F30000 # move to center before starting heatsoak
	M106 S255 # Turn on part fan
	HEAT_SOAK HEATER='heater_bed' TARGET={print_start.bed_temp} SOAKER='temperature_sensor chamber' SOAK_TEMP={print_start.soak_temp} CANCEL='CANCEL_PRINT' TIMEOUT=60 # always heatsoak even when printing pla. Chamber target for PLA etc. is 0. Print will start after bed reached temp and chamber stabilized

[gcode_macro PRINT_START]
description: Perform calibration and get ready to print
gcode:
    {% set print_start = printer['gcode_macro PRINT_START_VARIABLES'] %} # use print_start instead of printer['gcode_macro PRINT_START_VARIABLES']. Example printer['gcode_macro PRINT_START_VARIABLES.extruder_temp'] -> print_start.extruder_temp

    CLEAR_PAUSE # clear any pause... again
    BED_MESH_CLEAR # clear bed mesh

    M107 # turn off part fan (heatsoak turned it on before)

    AUTO_OFFSET_START EXTRUDER_TEMP={print_start.extruder_temp} BED_TEMP={print_start.bed_temp} # Parameters must be defined because this is a standalone module. This is a module of AUTO_OFFSET

    {% if print_start.material != "TPU" %} # Only purge if material is not TPU -> No purge for TPU since this causes trouble @ 24mmÂ³/s...
      PURGE_LINE # Purge Line
    {% endif %}

    M117 # Clear status messages

[gcode_macro PRINT_END]
description: The end of every print. Turn off heaters etc.
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F3600                 ; retract filament; 20 mm enables cold filamet changes
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 5} F3600  ; park nozzle at rear
    SAFE_LIFT_Z Z=50 F=3000.0 # lift 50 mm if possible
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0
    SET_FAN_SPEED FAN=nevermore_fan SPEED=0.0
    SET_VELOCITY_LIMIT ACCEL=10000 ACCEL_TO_DECEL=5000
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M18 ; turn off motors

[gcode_macro PURGE_LINE]
description: Purge Line
variable_max_line_length: 300 # max purge line length
variable_thin_line_length: 10 # thin line length. Line length = thick line + thin line
variable_thin_line_speed: 30 # speed for the thin line
variable_hotend_flow: 20 # used to calculate thick line speed
variable_thick_flow_length_ratio: 1 # 1:1 | ratio for move length and extrusion length
variable_thin_flow_length_ratio: 10 # 1:10 | ratio for move length and extrusion length
variable_start_position_x: 5 # start position. Is also used for the line end position (max x position - start_position_x)
variable_start_position_y: 5 # start position
gcode:
	{% set th = printer.toolhead %}
    {% set pi = 3.141592653589793 %}
    
    {% if max_line_length < th.axis_maximum.x - start_position_x*2 %}
      {% set LINE_LENGTH = max_line_length %}
    {% else %}
      {% set LINE_LENGTH = th.axis_maximum.x - start_position_x*2 %}
    {% endif %}

    {% set THICK_LINE_LENGTH = LINE_LENGTH - thin_line_length %}
    {% set THICK_LINE_EXTRUSION = THICK_LINE_LENGTH / thick_flow_length_ratio %}
    {% set THICK_LINE_VOLUME = ((printer.configfile.settings.extruder.filament_diameter**2 * pi) / 4) * THICK_LINE_EXTRUSION %}
    {% set THICK_LINE_FEED = (THICK_LINE_LENGTH / (THICK_LINE_VOLUME / hotend_flow)) * 60 %}

    {% set THIN_LINE_LENGTH = thin_line_length %}
    {% set THIN_LINE_EXTRUSION = THIN_LINE_LENGTH / thin_flow_length_ratio %}
    {% set THIN_LINE_FEED = thin_line_speed * 60 %}
    
    G90
    G0 X{start_position_x} Y{start_position_y} Z0.8
    G91
    M83
    G0 X{THICK_LINE_LENGTH} E{THICK_LINE_EXTRUSION} F{THICK_LINE_FEED}
    G0 X{THIN_LINE_LENGTH} E{THIN_LINE_EXTRUSION} F{THIN_LINE_FEED}

    G92 E0
    M82
    G90

[gcode_macro SAFE_LIFT_Z]
description: Lifts Z only if it's save
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z

[gcode_macro SMARTHOME]
description: Only homes if necessary 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

[gcode_macro IDLE_POS]
description: Move the printhead to a idle position
gcode:
    {% set th = printer.toolhead %}
    SAVE_GCODE_STATE NAME=IDLE_POS
    SMARTHOME
    M106 S0
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z{th.axis_maximum.z-50} F30000
    RESTORE_GCODE_STATE NAME=IDLE_POS

[gcode_macro LOAD_FILAMENT] # This is a very simple and "dumb" macro... I use it rarely
description: Load filament
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    M83
    G1 E50 F1000
    G1 E20 F1000
    G1 E30 F300
    G1 E30 F300
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    M83
    G1 E10 F300
    G1 E-50 F1000
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT