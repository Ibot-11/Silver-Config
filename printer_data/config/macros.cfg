#  __  __                                     
# |  \/  |   __ _    ___   _ __    ___    ___ 
# | |\/| |  / _` |  / __| | '__|  / _ \  / __|
# | |  | | | (_| | | (__  | |    | (_) | \__ \
# |_|  |_|  \__,_|  \___| |_|     \___/  |___/
#                                             
[gcode_macro PRINT_START_VARIABLES]
description: Set variables for print
### Variables (used in PRINT_WARMUP and PRINT_PREPARE) ###
variable_extruder_temp: 200
variable_probe_temp: 150
variable_bed_temp: 60
variable_material: ""
variable_chamber_temp : 0
gcode:
    ### Get Parameters ###
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
	{% set BED_TEMP = params.BED_TEMP|float %}
	{% set CHAMBER_TEMP = params.CHAMBER_TEMP|float|default(0) %}
    {% set MATERIAL = params.MATERIAL|string %}

    ### Set Variables ###  
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=bed_temp VALUE={BED_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=chamber_temp VALUE={CHAMBER_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=material VALUE="'{MATERIAL}'" # set variable

	
[gcode_macro PRINT_START]
description: Perform calibration and get ready to print
gcode:
    {% set print_start = printer['gcode_macro PRINT_START_VARIABLES'] %} # use print_start instead of printer['gcode_macro PRINT_START_VARIABLES']. Example printer['gcode_macro PRINT_START_VARIABLES.extruder_temp'] -> print_start.extruder_temp
    {% set th = printer.toolhead %}

    {% if print_start.material == "ABS" or print_start.material == "ASA" or print_start.material == "PC" or print_start.material == "PA" or print_start.material == "PA-CF" or print_start.material == "HIPS" %} # heated chamber materials (Orcaslicer)
      {% set CHAMBER_STATE = True %} # if heated chamber is required...
	{% else %}
      {% set CHAMBER_STATE = False %} # don't heat chamber for any other materials
	{% endif %}

    ### FAN MANAGEMENT ###
	{% if CHAMBER_STATE == False and print_start.material == "PETG" %}
      ### semi heated chamber (PETG) ###
      SET_FAN_SPEED FAN=nevermore_fan SPEED=0 # Nevermore 0%
      SET_FAN_SPEED FAN=exhaust_fan SPEED=0 # Exhaust 0%
    {% elif CHAMBER_STATE == True %}
      ### heated chamber ###
      SET_FAN_SPEED FAN=nevermore_fan SPEED=1 # Nevermore 100%
      SET_FAN_SPEED FAN=exhaust_fan SPEED=0 # Exhaust 0%
      M106 S255 # Turn on part fan
	{% elif CHAMBER_STATE == False %}
      ### cold chamber ###
      SET_FAN_SPEED FAN=nevermore_fan SPEED=0 # Nevermore 0%
      SET_FAN_SPEED FAN=exhaust_fan SPEED=1 # Exhaust 100%
      M107 # turn off part fan
	{% endif %}
    
    CLEAR_PAUSE # clear any pause...
    BED_MESH_CLEAR # clear bed mesh

	G28 # home

	G90 # absolute move
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z5 F30000 # move to center

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={print_start.probe_temp}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={print_start.bed_temp} 
    M109 S{print_start.probe_temp} # wait for extruder temperature
    M190 S{print_start.bed_temp} # wait for bed temprature

    G90
    G0 Z10 F30000 # 10mm lift

    M107 # turn off part fan

    CLEAN_NOZZLE

    QUAD_GANTRY_LEVEL
    G28 Z

    BED_MESH_CALIBRATE ADAPTIVE=1

    G90
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000
	M109 S{print_start.extruder_temp}

    CLEAN_NOZZLE

    {% if print_start.material != "TPU" %} # Only purge if material is not TPU -> No purge for TPU since this causes trouble @ 24mmÂ³/s...
      PURGE_LINE # Purge Line
    {% endif %}

    M117 # Clear status messages

[gcode_macro PRINT_END]
description: The end of every print. Turn off heaters etc.
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F3600                 ; retract filament; 20 mm enables cold filamet changes
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 5} F3600  ; park nozzle at rear
    SAFE_LIFT_Z Z=50 F=3000.0 # lift 50 mm if possible
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0
    SET_FAN_SPEED FAN=nevermore_fan SPEED=0.0
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M18 ; turn off motors

[gcode_macro PURGE_LINE]
description: Purge Line
variable_max_line_length: 300 # max purge line length
variable_thin_line_length: 10 # thin line length. Line length = thick line + thin line
variable_thin_line_speed: 30 # speed for the thin line
variable_hotend_flow: 10 # used to calculate thick line speed
variable_thick_flow_length_ratio: 1 # 1:1 | ratio for move length and extrusion length
variable_thin_flow_length_ratio: 10 # 1:10 | ratio for move length and extrusion length
variable_start_position_x: 5 # start position. Is also used for the line end position (max x position - start_position_x)
variable_start_position_y: 5 # start position
gcode:
	{% set th = printer.toolhead %}
    {% set pi = 3.141592653589793 %}
    
    {% if max_line_length < th.axis_maximum.x - start_position_x*2 %}
      {% set LINE_LENGTH = max_line_length %}
    {% else %}
      {% set LINE_LENGTH = th.axis_maximum.x - start_position_x*2 %}
    {% endif %}

    {% set THICK_LINE_LENGTH = LINE_LENGTH - thin_line_length %}
    {% set THICK_LINE_EXTRUSION = THICK_LINE_LENGTH / thick_flow_length_ratio %}
    {% set THICK_LINE_VOLUME = ((printer.configfile.settings.extruder.filament_diameter**2 * pi) / 4) * THICK_LINE_EXTRUSION %}
    {% set THICK_LINE_FEED = (THICK_LINE_LENGTH / (THICK_LINE_VOLUME / hotend_flow)) * 60 %}

    {% set THIN_LINE_LENGTH = thin_line_length %}
    {% set THIN_LINE_EXTRUSION = THIN_LINE_LENGTH / thin_flow_length_ratio %}
    {% set THIN_LINE_FEED = thin_line_speed * 60 %}
    
    G90
    G0 X{start_position_x} Y{start_position_y} Z0.8
    G91
    M83
    G0 X{THICK_LINE_LENGTH} E{THICK_LINE_EXTRUSION} F{THICK_LINE_FEED}
    G0 X{THIN_LINE_LENGTH} E{THIN_LINE_EXTRUSION} F{THIN_LINE_FEED}

    G92 E0
    M82
    G90

[gcode_macro SAFE_LIFT_Z]
description: Lifts Z only if it's save
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z

[gcode_macro SMARTHOME]
description: Only homes if necessary 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

[gcode_macro IDLE_POS]
description: Move the printhead to a idle position
gcode:
    {% set th = printer.toolhead %}
    SAVE_GCODE_STATE NAME=IDLE_POS
    SMARTHOME
    M106 S0
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z{th.axis_maximum.z-50} F30000
    RESTORE_GCODE_STATE NAME=IDLE_POS

[gcode_macro FILAMENT] # Only works with official mainsail.cfg
description: (Un)Load filament
variable_sensor_name: "filament_sensor" #Config name of the filament sensor
variable_position_x: -1 #X position when loading/unloading filament. -1 will move the toolhead to the middle of the axis.
variable_position_y: 10 # position when loading/unloading filament. -1 will move the toolhead to the middle of the axis.
variable_position_z: 50 #Z position when loading/unloading filament if not paused.
variable_move_speed: 500 #XYZ move speed in mm/s
variable_load_speed: 30 #speed for filament moves without extrusion.
variable_purge_speed: 3 #purge speed in mm/s.
variable_hotend_temp: 250 #hotend temperature if not paused.
variable_distance_to_hotend: 65 #length between extruder and hotend.
variable_purge_length_load: 50 #purge amount in mm when loading.
variable_purge_length_unload: 5 #purge amount in mm before unloading.
gcode:
    {% set FUNCTION = params.FUNCTION|default("LOAD")|string %}    
    {% set resume = printer['gcode_macro RESUME'] %}
    {% set c_variable = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}

    {% if position_x == -1 %}
      {% set POSITION_X = printer.toolhead.axis_maximum.x//2 %}
    {% endif %}
    {% if position_y == -1 %}
      {% set POSITION_Y = printer.toolhead.axis_maximum.y//2 %}
    {% endif %}

  
    {% if not printer.pause_resume.is_paused %}
      {% if printer.toolhead.homed_axes != "xyz" %}
        G28
      {% endif %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={hotend_temp}
      RESPOND TYPE=echo MSG='Heating...'
      G90
      G0 X{POSITION_X|default(position_x)} Y{POSITION_Y|default(position_y)} Z{position_z} F{move_speed*60}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend_temp-3}
        
        
    {% elif printer.pause_resume.is_paused %}
        G90
        G0 X{POSITION_X|default(position_x)} Y{POSITION_Y|default(position_y)} F{move_speed*60}
      {% if printer.idle_timeout.state|upper == "IDLE" or resume.idle_state %} #restore temperature if needed
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
        # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise 
        RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, resume.last_extruder_temp.temp) }'
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={resume.last_extruder_temp.temp}
        RESPOND TYPE=echo MSG='Heating...'
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={resume.last_extruder_temp.temp-3}
      {% endif %}
      
    {% endif %}
    

    M83
    
    {% if FUNCTION == "LOAD" %}
      RESPOND TYPE=echo MSG='Loading Filament...'
      M117 Loading Filament...
      M106 S255
      {% for _ in range(distance_to_hotend) %} #doing a loop to prevent error
        G1 E1 F{load_speed*60}
      {% endfor %}
      {% for _ in range(purge_length_load) %}
        G1 E1 F{purge_speed*60}
      {% endfor %}
      G1 E-{c_variable.retract|default(1)} F{load_speed*60}
      G4 S2000 #wait 2 sec
      M107
      {% if not printer.pause_resume.is_paused and FUNCTION == "LOAD" %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
      {% endif %}

      
    {% elif FUNCTION == "UNLOAD" %}
      RESPOND TYPE=echo MSG='Unloading Filament...'
      M117 Unloading Filament...
      {% for _ in range(purge_length_unload) %}
        G1 E1 F{purge_speed*60}
      {% endfor %}
      {% for _ in range(distance_to_hotend) %}
        G1 E-1.5 F{load_speed*60}
      {% endfor %}
      
    {% else %}
      RESPOND TYPE=echo MSG='Unknown Function!'
    {% endif %}
      
    M117
    RESPOND TYPE=echo MSG='Done!'
  

[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
    {% set filament = printer['gcode_macro FILAMENT'] %}
    
    SET_FILAMENT_SENSOR SENSOR={filament.sensor_name} ENABLE=0
    FILAMENT FUNCTION='LOAD'
    SET_FILAMENT_SENSOR SENSOR={filament.sensor_name} ENABLE=1
    
[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    {% set filament = printer['gcode_macro FILAMENT'] %}
    
    SET_FILAMENT_SENSOR SENSOR={filament.sensor_name} ENABLE=0
    FILAMENT FUNCTION='UNLOAD'
    SET_FILAMENT_SENSOR SENSOR={filament.sensor_name} ENABLE=1